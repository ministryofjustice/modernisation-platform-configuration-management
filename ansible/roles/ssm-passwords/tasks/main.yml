---
- name: Prepare ssm_passwords_dict fact
  set_fact:
    ssm_passwords_dict: "{{ ssm_passwords_dict|default({}) }}"

# install so scripts can easily access passwords
- name: Install jq
  ansible.builtin.yum:
    name: "jq"
    state: present

- name: Get SSM Parameters
  set_fact:
    ssm_passwords_dict: |
      {{ ssm_passwords_dict | combine({
           item.key: {
             'parameter': item.value.parameter,
             'value': lookup('amazon.aws.aws_ssm', item.value.parameter, region='eu-west-2')
           }
         }, recursive=true) }}
  loop_control:
    label: "{{ item.key }}"
  loop: "{{ ssm_passwords | dict2items }}"

# If this fails, the SSM parameter doesn't exist or isn't valid json
- name: Prepare any placeholder parameters
  set_fact:
    ssm_passwords_dict: |
      {{ ssm_passwords_dict | combine({
           item.key: {
             'passwords': {} if 'placeholder' in ssm_passwords_dict[item.key].value else ssm_passwords_dict[item.key].value|from_json
           }
         }, recursive=true) }}
  loop_control:
    label: "{{ item.key }}"
  loop: "{{ ssm_passwords | dict2items }}"

# The if statement:
# - use the password defined in the ssm_passwords variable if there is one
# - else use existing password defined in the SecretString and force_rotate not set
# - else generate random password if the value is set to auto in ssm_passwords
# - else fail
# Oracle passwords must start with letter and contain at least one digit
- name: Generate any missing passwords
  set_fact:
    ssm_passwords_dict: |
      {{ ssm_passwords_dict | combine({
           item[0].key: {
             'newpasswords': {
               item[1].keys()|first:
                 item[1].values()|first
                   if item[1].values()|first != None and item[1].values()|first != 'auto'
                 else ssm_passwords_dict[item[0].key].passwords[item[1].keys()|first]
                   if item[1].keys()|first in ssm_passwords_dict[item[0].key].passwords
                   and [item[0].key, item[1].keys()|first]|join(':') not in ssm_passwords_force_rotate
                 else lookup('ansible.builtin.password', '/dev/null chars=ascii_letters length=1')
                 + lookup('ansible.builtin.password', '/dev/null chars=digits length=1')
                 + lookup('ansible.builtin.password', '/dev/null chars=ascii_letters,digits length=13')
                   if item[1].values()|first == 'auto'
                 else None
             },
             'oldpasswords': {
               item[1].keys()|first:
                 ssm_passwords_dict[item[0].key].passwords[item[1].keys()|first]
                   if item[1].keys()|first in ssm_passwords_dict[item[0].key].passwords
                 else ''
             }
           }
         }, recursive=true) }}
  failed_when: ssm_passwords_dict[item[0].key].newpasswords[item[1].keys()|first] == None
  loop_control:
    label: "{{ item[0].key }}:{{ item[1].keys()|first }}"
  with_subelements:
    - "{{ ssm_passwords | dict2items }}"
    - value.users

- name: Check parameters which require updating
  set_fact:
    ssm_passwords_dict: |
      {{ ssm_passwords_dict | combine({
           item.key: {
               'passwords' : ssm_passwords_dict[item.key].passwords | combine(ssm_passwords_dict[item.key].newpasswords),
               'upload': ssm_passwords_dict[item.key].newpasswords != ssm_passwords_dict[item.key].oldpasswords
           }
         }, recursive=true) }}
  loop_control:
    label: "{{ item.key }}"
  loop: "{{ ssm_passwords | dict2items }}"

- name: Create fact with updated parameters
  set_fact:
    ssm_passwords_to_update: "{{ ssm_passwords_dict | dict2items | selectattr('value.upload', 'equalto', true) }}"

# - debug:
#   var: ssm_passwords_to_update

# Not using community.aws.ssm_parameter as this requires some additional
# parameters such as ssm:DescribeParameters at root level
- name: Upload updated parameters
  ansible.builtin.shell: |
    PATH=$PATH:/usr/local/bin
    aws ssm put-parameter --name '{{ item.value.parameter }}' --type 'SecureString' --data-type 'text' --value '{{ item.value.passwords|to_json }}' --overwrite
  loop_control:
    label: "{{ item.key }}"
  loop: "{{ ssm_passwords_to_update }}"

- name: Update upload fact
  set_fact:
    ssm_passwords_dict: |
      {{ ssm_passwords_dict | combine({
           item.key: {
               'upload': False
           }
         }, recursive=true) }}
  loop_control:
    label: "{{ item.key }}"
  loop: "{{ ssm_passwords | dict2items }}"
