# We log that Password Rotation is in progress to allow Enterprise Manager to ignore any incidents
# during this period when alerting with the check_em_incident.sh script.
# This is similar to setting a Node Level OEM blackout when using built-in Notifications but avoids
# the need for the Diagnostics pack.
- name: Get Name of Host Target
  shell: |
    . ~/.bash_profile
    {{ emctl_agent }} config agent listtargets | awk -F, '/^\[.*, host\]/{print $1}' | sed 's/^\[//'
  register: get_agent_host
  changed_when: false

- name: Temporarily Exclude Host from Monitoring
  when: action == 'start'
  block:
    - name: Get the Time
      setup:
        filter: ansible_date_time

    - name: Print the current time
      debug:
        msg: "Current time: {{ ansible_date_time.iso8601 }}, converted to epoch: {{ ansible_date_time.epoch }}, timezone offset: {{ ansible_date_time.tz_offset }}"

    - name: Create blackout name fact if defined
      set_fact:
        blackout_name: "{{ blackout }}"
      when: (blackout is defined) and (blackout|length > 0)

    - name: Create blackout name fact if not defined
      set_fact:
        blackout_name: "Maintenance"
      when: ((blackout is defined) and (blackout|length == 0)) or (blackout is not defined)

    - name: Set default value for duration if not defined
      set_fact:
        duration: "30 00:00"
      when: duration is not defined or duration | length == 0

    - name: Print the duration value passed in
      debug:
        msg: "Duration value passed in: {{ duration }}"

    - name: Convert duration to seconds
      set_fact:
        duration_seconds: >-
          {% if duration is string and ':' in duration %}
          {% set parts = duration.split(' ') %}
          {% if parts | length == 2 %}
            {% set days = parts[0] | int %}
            {% set time_parts = parts[1].split(':') %}
          {% else %}
            {% set days = 0 %}
            {% set time_parts = parts[0].split(':') %}
          {% endif %}
          {{ (days * 86400) + (time_parts[0] | int * 3600) + (time_parts[1] | int * 60) }}
          {% else %}
          {{ duration | int }}
          {% endif %}

    - name: Calculate end timestamp
      set_fact:
        end_timestamp: "{{ (ansible_date_time.epoch | int) + (duration_seconds | int) }}"
      when: duration_seconds is defined and duration_seconds | int > 0

    - name: Show end timestamp
      debug:
        msg: "End timestamp: {{ end_timestamp }}"
      when: end_timestamp is defined and duration_seconds | int > 0

    - name: Define Exclude Comment For Host
      set_fact:
        exclude_comment: >-
          {{ 'Excluded from monitoring due to ' + blackout_name }}
          {%- if duration_seconds is defined and duration_seconds | int > 0 %}
          {{ ' until ' + '%Y-%m-%d-%H-%M-%S' | strftime(end_timestamp) }}
          {%- endif %}

    - name: Ensure EMCLI session is ready
      include_tasks: "{{ playbook_dir }}/../../common/tasks/emcli_login.yml"

    - name: Update Host Comment Property With Excluded Host
      shell: |
        export PATH=$PATH:{{ emcli_java_location }}
        echo "{{ emcli }} set_target_property_value -property_records='{{ get_agent_host.stdout }}:host:Comment:{{ exclude_comment }}'"
        {{ emcli }} set_target_property_value -property_records="{{ get_agent_host.stdout }}:host:Comment:{{ exclude_comment }}"
      register: updatecomment

    - name: Show Host Comment Command
      debug:
        msg: "Host Comment Command: {{ updatecomment.stdout }}"

# Some metrics should be explicitly re-evaluated as they are not gathered frequently and may be out of date when the exclusion is removed
- name: Re-Evaluate Named Host Metrics
  include_tasks: reevaluate_host_metrics.yml
  when: action == 'stop'
  vars:
    agent_target: "{{ get_agent_host.stdout | trim }}"
    metric_name: "{{ item }}"
  loop:
    - "ME$DATA_GUARD_ACTIVE_TARGET"

- name: Declare Named Database Metrics Lists
  set_fact:
    dataguard_named_database_metrics: ["dataguard_11gR2", "fsfo_observers"]
    named_database_metrics: []

# Check dataguard configured for none OEM enviroments
- name: Check Dataguard Configured
  set_fact:
    dataguard_configured: "{{ high_availability_count[group_names | select('match','.*_dbs') | first | regex_replace('^.*_(.*)_dbs', '\\1') | regex_replace('^(dsd|boe)$', 'mis\\1') ] | int > 0 }}"
  when: high_availability_count is defined

- name: Re-Evaluate Named Database Metrics
  include_tasks: reevaluate_database_metrics.yml
  when:
    - action == 'stop'
    - ((item in dataguard_named_database_metrics and dataguard_configured | default(false)) or (item in named_database_metrics))
  vars:
    metric_name: "{{ item }}"
  loop: "{{ dataguard_named_database_metrics + named_database_metrics }}"

- name: Re-Include Hosts in Monitoring After Job Completion
  when: action == 'stop'
  block:
    - name: Ensure EMCLI session is ready
      include_tasks: "{{ playbook_dir }}/../../common/tasks/emcli_login.yml"

    - name: Update Host Comment Property With Excluded Host
      shell: |
        export PATH=$PATH:{{ emcli_java_location }}
        {{ emcli }} set_target_property_value -property_records="{{ get_agent_host.stdout }}:host:Comment:"
      register: updatecomment

    - name: Show Host Comment Command
      debug:
        msg: "Host Comment Command: {{ updatecomment.stdout }}"
