#!/usr/bin/env bash

if [[ "$(whoami)" != "oracle" ]]
then
    echo "This script is expected to be run as the Oracle user" 1>&2
    exit 1
fi 

# We need to make sure this is in the path    
export PATH=${PATH}:/usr/local/bin

# Templated in from ansible
HOSTNAME="${HOSTNAME}" 
INTERVAL="{{ collectd_script_interval }}"
ORACLE_SID_LIST="{{ oracle_sid_list }}"
ORACLE_BATCH_ERROR_FILE="{{ oracle_batch_error_file }}"
ORACLE_BATCH_STATUSES="{{ oracle_batch_statuses }}"

db_connected() {
    # DB resources names are usually 'ora.${DB}.db' but some have a suffix after ${DB}
    DB="$(crsctl status resource | grep -m1 -i ora\.${SID}.*\.db | cut -f2 -d=)"

    # Check added to alert on not having a database resource BEFORE trying to get it's status
    if [[ -z "$DB" ]]
    then
        echo "Failed to find a database resource for ${SID}" 1>&2
        return 1
    fi

    # Worth noting here that crsctl exits with code 0 even if you try and find details of a database that doesn't exist
    STATUS="$(crsctl status resource ${DB} -v | grep STATE_DETAILS | cut -f2 -d= | cut -f1 -d,)"

    case ${STATUS} in
        "Open")
            return 0
            ;;
        "Open,Readonly")
            return 0
            ;;
        "Mounted (Closed)")
            return 0
            ;;
        *)
            echo "Failed to find a valid state for ${DB}" 1>&2
            return 1
            ;;
    esac
}

batch_status() {

    local LINE="$1"
    local ORACLE_BATCH_ERROR_FILE="$2"
    
    # Check if the file contains any of the batch statuses we're looking for
    if [[ "$(cat $ORACLE_BATCH_ERROR_FILE | grep $LINE)" ]]
    then
        val="$(cat $ORACLE_BATCH_ERROR_FILE | grep "$LINE" | cut -f2 -d' ')"
        if [[ $val == 0 ]] || [[ $val == 1 ]]
        then
            return "$val"
        else
            echo "db error for $LINE is not a number" 1>&2
            return 2
        fi
    else
        echo "no match for $LINE" 1>&2
        return 2
    fi
}

while sleep "$INTERVAL"
do
    for SID in ${LIST}
    do            
        ORACLE_SID="+ASM"
        ORAENV_ASK="NO"
        . oraenv > /dev/null
        db_connected
        returnval=$?
        echo "PUTVAL \"$HOSTNAME-$SID/exec-oracle-health/bool\" interval=$INTERVAL N:$returnval"
    done


    if [[ -s "${ORACLE_BATCH_ERROR_FILE}" ]]
    then
        for LINE in ${ORACLE_BATCH_STATUSES}
        do
            batch_status "$LINE" "$ORACLE_BATCH_ERROR_FILE"
            status=$?
            echo "PUTVAL \"$HOSTNAME-$LINE/exec-oracle-batch-status/graph\" interval=$INTERVAL N:$status"
        done
    else
        echo "issue with file" 
    fi
done
