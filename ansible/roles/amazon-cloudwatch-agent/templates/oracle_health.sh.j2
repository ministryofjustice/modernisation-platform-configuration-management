#!/usr/bin/env bash

if [[ "$(whoami)" != "oracle" ]]
then
    echo "This script is expected to be run as the Oracle user" 1>&2
    exit 1
fi 

# We need to make sure this is in the path    
export PATH=${PATH}:/usr/local/bin

# Templated in from ansible
HOSTNAME="${HOSTNAME}" 
INTERVAL="{{ collectd_script_interval }}"
LIST="{{ oracle_monitoring_list }}"

db_connected() {
    # DB resources names are usually 'ora.${DB}.db' but some have a suffix after ${DB}
    DB="$(crsctl status resource | grep -m1 -i ora\.${SID}.*\.db | cut -f2 -d=)"

    # Check added to alert on not having a database resource BEFORE trying to get it's status
    if [[ -z "$DB" ]]
    then
        echo "Failed to find a database resource for ${SID}" 1>&2
        return 1
    fi

    # Worth noting here that crsctl exits with code 0 even if you try and find details of a database that doesn't exist
    STATUS="$(crsctl status resource ${DB} -v | grep STATE_DETAILS | cut -f2 -d= | cut -f1 -d,)"

    case ${STATUS} in
        "Open")
            return 0
            ;;
        "Open,Readonly")
            return 0
            ;;
        "Mounted (Closed)")
            return 0
            ;;
        *)
            echo "Failed to find a valid state for ${DB}" 1>&2
            return 1
            ;;
    esac
}

while sleep "$INTERVAL"
do
    for SID in ${LIST}
    do            
        ORACLE_SID="+ASM"
        ORAENV_ASK="NO"
        . oraenv > /dev/null
        db_connected
        returnval=$?
        echo "PUTVAL \"$HOSTNAME-$SID/exec-oracle-health/bool\" interval=$INTERVAL N:$returnval"
    done
done
