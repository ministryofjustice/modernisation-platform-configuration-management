---
- name: check if amazon-cloudwatch-agent installed
  ansible.builtin.shell: |
    check_installed() {
      check="$(amazon-cloudwatch-agent-ctl -m ec2 -a status)"
      if [[ $check ]]
      then 
        return 0
      else 
        return 1
      fi
    }
    check_installed
  ignore_errors: true
  register: agent_installed

- name: Install amazon-cloudwatch-agent
  ansible.builtin.yum:
    name: "{{ amazon_cloudwatch_agent_package }}"
  when: agent_installed is failed

- name: Create amazon-cloudwatch-agent config directory
  ansible.builtin.file:
    path: "{{ amazon_cloudwatch_agent_config_path }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Set up collectd for monitoring on linux or oracle servers
  block:
    - name: Ensure the EPEL repository is available
      ansible.builtin.package:
        name: epel-release
        state: installed
      register: epel_release_installed
      ignore_errors: true

    - name: Add epel-release to repolist
      ansible.builtin.shell: |
        yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
      when: epel_release_installed is failed

    - name: Install collectd agent
      ansible.builtin.yum:
        name: collectd
        state: present

  when: ansible_distribution_major_version == '7'

# TODO: Implement this later 'collectd 5.12.0' is not available for RHEL 6
# - name: set up collectd for monitoring on nomis-web instances
#   block:

#     - name: get collectd installer directly
#       ansible.builtin.yum_repository:
#         name: epel
#         description: EPEL YUM repo
#         baseurl: https://dl.fedoraproject.org/pub/archive/epel/6/x86_64/epel-release-6-8.noarch.rpm

#     - name: extract collectd installer
#       ansible.builtin.unarchive:
#         src: collectd-5.12.0.tar.bz2
#         dest: /opt
#         remote_src: yes

#     - name: install collectd
#       ansible.builtin.shell: |
#         cd collectd-version
#         ./configure
#         make all install

#   when: ansible_distribution_major_version == '6'

- name: Configure collectd
  ansible.builtin.template:
    src: collectd.conf.j2
    dest: "/etc/collectd.conf"
    owner: root
    mode: 0644

- name: add linux conf for collectd to get service state as metrics
  ansible.builtin.file:
    src: linux.conf
    dest: "/etc/collectd.d/linux.conf"
    owner: root
    mode: 0644

- name: create folder for exec script to collect metrics
  ansible.builtin.file:
    path: "/opt/collectd"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: Add linux serice metrics script
  ansible.builtin.template:
    src: linux_service_metrics.sh.j2
    dest: /opt/collectd/linux_service_metrics.sh
    mode: 0755
    owner: root
  # notify: restart collectd # pick up health check script config changes

- name: set up collectd for monitoring on nomis-db instances 
  block: 

    - name: add custom types file for oracle_health.sh
      ansible.builtin.copy:
        src: types.db.custom
        dest: /usr/share/collectd/types.db.custom
        owner: root
        mode: 0644

    - name: Get oracle database sids for monitoring as a list from the oracle-sids tag
      set_fact:
        oracle_sid_list: '{{ ec2.tags["oracle-sids"].split() | default([]) | join(" ") }}'

    - name: Add oracle_health check script
      ansible.builtin.template:
        src: oracle_health_metrics.sh.j2
        dest: /opt/collectd/oracle_health_metrics.sh
        mode: 0755
        owner: oracle
      # notify: restart collectd # pick up health check script config changes

  when: ec2.tags['oracle-sids'] is defined

- name: Start collectd service
  ansible.builtin.service:
    name: collectd
    state: started
    enabled: yes

- name: Set up amazon-cloudwatch-agent weblogic log scraping
  block:
    - name: set fact
      set_fact:
        weblogic_log_path: "{{ weblogic_log_path }}"

    - name: Create amazon-cloudwatch-agent config file for weblogic
      src: agent_config_weblogic.json.j2
      dest: "{{ amazon_cloudwatch_agent_config_path }}/{{ amazon_cloudwatch_agent_weblogic_config_file }}"
      owner: root
      group: root
      mode: 0755

  when: ec2.tags['server-type'] == 'nomis-web'

- name: Get tag values for use in config file
  set_fact:
    name: "{{ ec2.tags.Name }}"
    server_type: "{{ ec2.tags['server-type'] }}"
    instance_id: "{{ ansible_ec2_instance_id }}"

- name: Create amazon-cloudwatch-agent config file
  ansible.builtin.template:
    src: "{{ amazon_cloudwatch_config_template_path }}"
    dest: "{{ amazon_cloudwatch_agent_config_path }}/{{ amazon_cloudwatch_agent_config_file }}"
    owner: root
    group: root
    mode: 0755

# covers cloudwatch agent start for linux (common) and oracle EC2 instances
- name: Start amazon-cloudwatch-agent service
  ansible.builtin.shell: |
    /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -s -c file:"{{ amazon_cloudwatch_agent_config_path }}/{{ amazon_cloudwatch_agent_config_file }}"

# additional settings for weblogic EC2 instances
- name: Append settings for amazon-cloudwatch-agent for weblogic EC2 instances
  ansible.builtin.shell: |
    /opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a append-config -m ec2 -s -c file:"{{ amazon_cloudwatch_agent_config_path }}/{{ amazon_cloudwatch_agent_weblogic_config_file }}"
  when: ec2.tags['server-type'] == 'nomis-web'