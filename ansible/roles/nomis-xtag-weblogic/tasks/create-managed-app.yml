---
- name: Fail if managed_server variable not defined
  fail:
    msg: "Error, please ensure managed_server is defined"
  when: managed_server is not defined

- name: Check if managed app already configured
  ansible.builtin.stat:
    path: /etc/systemd/system/wls_managedserver.service
  register: weblogic_created_managed_app_check

- name: Copy managedserver systemd helper scripts
  ansible.builtin.template:
    src: "10.3{{ item }}"
    dest: "{{ item }}"
    mode: "0755"
    owner: oracle
    group: oinstall
  loop:
    - /home/oracle/admin/scripts/startManagedWebLogic.sh
    - /home/oracle/admin/scripts/waitManagedWebLogic.sh
    - /home/oracle/admin/scripts/stopManagedWebLogic.sh

- name: Copy managedserver systemd service
  ansible.builtin.template:
    src: "10.3{{ item }}"
    dest: "{{ item }}"
  loop:
    - /etc/systemd/system/wls_managedserver.service
  register: managedserver_systemd

- name: Run systemd reload
  ansible.builtin.systemd:
    daemon_reload: true
  when: managedserver_systemd.changed

- name: Enable managedserver service
  ansible.builtin.service:
    name: wls_managedserver
    enabled: yes

- name: Configure managed app
  block:
    - debug:
        msg: "Creating managed app {{ managed_server }}"

    - name: Ensure services are running
      ansible.builtin.service:
        name: "{{ item }}"
        state: started
      loop:
        - wls_nodemanager
        - wls_adminserver

    - name: Copy managed app configuration files
      ansible.builtin.template:
        src: "10.3{{ item }}"
        dest: "{{ item }}"
        owner: oracle
        group: oinstall
      loop:
        - /u01/software/weblogic/{{ managed_server }}.properties

    - name: Create application directories
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: oracle
        group: oinstall
        mode: "0755"
      loop:
        - "{{ xtag_app_path }}/log"
        - "{{ xtag_app_path }}/release"

    - name: Get xtag application release file from S3
      amazon.aws.aws_s3:
        bucket: "{{ image_builder_s3_bucket_name }}"
        object: "weblogic-software{{ item }}"
        dest: "{{ item }}"
        mode: get
        overwrite: latest
      loop:
        - "{{ xtag_app_path }}/release/install_xtagoutbound.zip"

    - name: Extract xtag application file
      ansible.builtin.unarchive:
        owner: oracle
        group: oinstall
        src: "{{ xtag_app_path }}/release/install_xtagoutbound.zip"
        dest: "{{ xtag_app_path }}"
        remote_src: true

    - name: Copy xtag lib files in {{ domain_name }}
      ansible.builtin.copy:
        owner: oracle
        group: oinstall
        src: "{{ xtag_app_path }}/lib/"
        dest: "{{ domain_home }}/{{ domain_name }}/lib/"
        remote_src: true

    - name: Create managed app
      become_user: oracle
      ansible.builtin.shell: |
        set -eo pipefail
        . ~/.bash_profile
        . $WL_HOME/server/bin/setWLSEnv.sh
        main() {
          echo "# create managed app {{ managed_server }}"
          java weblogic.WLST ~/admin/scripts/create_managed_app.py -p /u01/software/weblogic/{{ managed_server }}.properties
        }
        main 2>&1 | logger -s -p local3.info -t ansible-xtag-weblogic
      async: 3600
      poll: 60

    - name: Create managed app security directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: oracle
        group: oinstall
        mode: "0755"
      loop:
        - "{{ domain_home }}/{{ domain_name }}/servers/{{ managed_server }}/security"

    - name: Copy managed app boot properties
      ansible.builtin.template:
        src: "10.3{{ domain_home }}/{{ domain_name }}/servers/AdminServer/security/boot.properties"
        dest: "{{ item }}"
        owner: oracle
        group: oinstall
        force: false
      loop:
        - "{{ domain_home }}/{{ domain_name }}/servers/{{ managed_server }}/security/boot.properties"

    - name: Stop all services
      ansible.builtin.service:
        name: "{{ item }}"
        state: stopped
      loop:
        - wls_nodemanager
        - wls_adminserver
        - wls_managedserver

  always:
    - name: Remove temporary forms configuration files
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop:
        - /u01/software/weblogic/{{ managed_server }}.properties

  # block
  when: not weblogic_created_managed_app_check.stat.exists

- name: Start all services
  ansible.builtin.service:
    name: "{{ item }}"
    state: started
  loop:
    - wls_nodemanager
    - wls_adminserver
    - wls_managedserver
