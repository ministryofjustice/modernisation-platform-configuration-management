- name: Create weblogic dictionary
  set_fact:
    weblogic_info: {}
    weblogic_cluster: "{{ environment_name }}-cluster"

- name: Get the number of Container instances for the service
  delegate_to: localhost
  become: no
  shell: aws ecs describe-clusters --clusters {{ weblogic_cluster }} --region {{ region }} | jq -r '.clusters[].registeredContainerInstancesCount'
  register: container_count

- name: List services that contain 'weblogic' in the name
  delegate_to: localhost
  become: no
  shell: aws ecs list-services --cluster {{ weblogic_cluster }} --region {{ region }} | jq -r '.serviceArns[]' | egrep -- "weblogic" | awk -F'/' '{print $NF}'
  register: weblogic_services

- name: Create temporary weblogic dictionary and Initalise variables
  set_fact:
    weblogic_temp_info: {}
    vcpu_list: []
    total_services_vcpus: 0
    total_available_vpcus: 0

- name: Find cluster information for {{ environment_name }}
  include_tasks: get-ecs-info.yml
  vars:
    service: "{{ serv }}"
    cluster: "{{ weblogic_cluster }}"
  with_items: "{{ weblogic_services.stdout_lines }}"
  loop_control:
    loop_var: serv

- name: Get the no. of vpcus used by all services into a list
  set_fact:
    vcpu_list: "{{ vcpu_list + [item.value.total_no_vcpus] }}"
    total_services_vcpus: "{{  total_services_vcpus | default(0) | int + item.value.total_no_vcpus }}"
    total_available_vpcus: "{{ container_count.stdout | int * item.value.instance_type_vcpu_count }}"
  with_dict: "{{ weblogic_temp_info }}"

- name: Calculate the number of vcpu's allowed
  block:
    - set_fact:
        no_vcpus_used: "{{ total_available_vpcus }}"
      when: total_services_vcpus | int >= total_available_vpcus | int

    - set_fact:
        no_vcpus_used: "{{ total_services_vcpus }}"
      when: total_services_vcpus | int  < total_available_vpcus | int

- name: Populate weblogic main info dictionary
  set_fact:
    weblogic_info: "{{ weblogic_info | combine( {item.value.environment: { 'instance_type': item.value.instance_type, 'instance_type_vcpu_count': item.value.instance_type_vcpu_count, 'total_no_vcpus_available': total_available_vpcus,'total_no_vcpus_used': no_vcpus_used | int }} ) }}"
  with_dict: "{{ weblogic_temp_info }}"

- name: Remove weblogic results file
  delegate_to: localhost
  become: no
  file:
    path: "{{ weblogic_output }}"
    state: absent

- name: Create audit directory
  delegate_to: localhost
  become: no
  file:
    path: "{{ audit_dir }}"
    state: directory

- name: Create weblogic results file
  delegate_to: localhost
  become: no
  file:
    path: "{{ weblogic_output }}"
    state: touch

- name: Set headings in weblogic results file
  delegate_to: localhost
  become: no
  lineinfile:
    path: "{{ weblogic_output }}"
    line: "Environment:InstanceType:InstanceTypeVcpuCount:TotalVpcuAvailable:TotalVcpuUsed"

- name: Copy results to local file
  delegate_to: localhost
  become: no
  lineinfile:
    path: "{{ weblogic_output }}"
    line: "{{ item.key }}:{{ item.value.instance_type }}:{{ item.value.instance_type_vcpu_count }}:{{item.value.total_no_vcpus_available }}:{{ item.value.total_no_vcpus_used }}"
  with_dict: "{{ weblogic_info }}"

- name: Total up number for weblogic vcpu's
  set_fact:
    total_vpcu: "{{ total_vpcu | default(0) | int + item.value.total_no_vcpus_used }}"
  with_dict: "{{ weblogic_info }}"

- name: Copy vcpu total to local file
  delegate_to: localhost
  become: no
  lineinfile:
    path: "{{ weblogic_output }}"
    line: "Vcpu Total: {{ total_vpcu }}"

- name: Upload weblogic output file to S3
  delegate_to: localhost
  become: no
  shell: |
    export PATH=$PATH:/usr/local/bin
    aws s3 cp {{ weblogic_output }} s3://{{ dependencies_bucket.name }}/{{ audit_output }}/ --acl bucket-owner-full-control {{ general_kms_key_option }}
