---
- name: Get Database SID
  set_fact:
    database_sid: "{{ database_primary_sid | default(database_standby_sid) }}"

- name: Create Empty Expected Database Parameters Dictionary if Not Defined in Config
  set_fact:
    database_parameters: {}
  when: database_parameters is not defined

# We default the expected management pack licence to NONE if we have
# not explicitly stated in the config that management packs are available
- name: Create Default Pack Licencing Key if Not Defined
  set_fact:
    default_pack_licence:
      control_management_pack_access: NONE
  when: "'control_management_pack_access' not in database_parameters"

- name: Add Default Pack Licencing Key if Not Defined
  set_fact:
    database_parameters: "{{ database_parameters| combine(default_pack_licence) }}"
  when: "'control_management_pack_access' not in database_parameters"

# Always fetch sga_max_size regardless of whether we need it as it is an upper limit for sga_target
# Always fetch control_file_record_keep_time as we need to check if RMAN retention time is within limit
- name: Create CSV List of Database Parameters
  set_fact:
    parameter_csv: "{{ database_parameters | dictsort | map(attribute='0') | map('regex_replace', '^(.*)$', \"'\\1'\") | join(',') + \",'sga_max_size','control_file_record_keep_time'\" }}"

- name: Get List of Current Database Parameter Values
  script: get_parameter_values.sh {{ database_sid }} "{{ parameter_csv }}"
  register: current_parameter_values
  changed_when: false

- set_fact:
    database_parameters_actual: "{{ database_parameters_actual | default({}) | combine({item.split(',')[0]:item.split(',')[1]}) }}"
  loop: "{{ current_parameter_values.stdout_lines | select() | list }}"

- name: Create dictionary for parameters that can be changed in spfile only
  set_fact:
    database_parameters_spfile: "{{ database_parameters_spfile | default({}) | combine({item.split(',')[0]:item.split(',')[2]}) }}"
  with_items: "{{ current_parameter_values.stdout_lines | select() | list }}"

# Where we do not have an RMAN Catalog (engineering accounts) ensure that we do
# not attempt to reduce the Control File Record Keep type below the RMAN Retention Policy
- name: Check RMAN Retention Policy
  when: catalog is not defined
  block:
    - name: Change target host group name if not ending with delius_primarydb
      set_fact:
        primarydb_group: "{{ group_names | select('match','environment_name_.*' + ( project_name | default('UNSET'))  + '.*' + ( simple_environment_name | default('UNSET')) + '.*_dbs$') | first | default('') | replace('_dbs$','_primarydb') }}"

    - name: Get Specified RMAN Recovery Window
      set_fact:
        recovery_window: "{{ hostvars[groups[primarydb_group][0]]['rman_retention_policy'] | regex_replace('RECOVERY WINDOW OF (\\d+) DAYS','\\1') }}"
      when: hostvars[groups[primarydb_group][0]]['rman_retention_policy'] is defined

    # If the Recovery Window has not been specified in the Ansible variable check what it is set to
    - name: Get Actual RMAN Recovery Window
      script: get_rman_retention.sh
      register: get_rman_retention
      when: not hostvars[groups[primarydb_group][0]]['rman_retention_policy'] is defined

    - name: Get RMAN Recovery Window
      set_fact:
        recovery_window: "{{ get_rman_retention.stdout | regex_replace('.*CONFIGURE RETENTION POLICY TO RECOVERY WINDOW OF (\\d+) DAYS.*','\\1')}}"
      when:
        - get_rman_retention is defined
        - (get_rman_retention.stdout | default('')) is search('.*CONFIGURE RETENTION POLICY TO RECOVERY WINDOW.*')

    # If we have not yet found the size of the Recovery Window it is probably because the database
    # is using REDUNDANCY rather than RECOVERY WINDOW, so just default the size to zero.
    - name: Default Recovery Window
      set_fact:
        recovery_window: 0
      when: recovery_window is not defined

    - fail:
        msg: "Control File Record Keep Time of {{ database_parameters.control_file_record_keep_time | default(database_parameters_actual['control_file_record_keep_time']) }} is less than RMAN Retention Period of {{ recovery_window }} days."
      when:
        - database_parameters.control_file_record_keep_time | default(database_parameters_actual['control_file_record_keep_time']) | int < recovery_window | int

# We define memory_expanded_values as the values for memory parameters in bytes, i.e. expanding out the K, M or G suffixes
# so that we can do integer based comparisons.  memory_expanded_values are the target values (not necessarily those in use on the instance).
- name: Expand Out Kilo Memory Sizes
  set_fact:
    memory_expanded_values: "{{ memory_expanded_values | default({}) | combine({item: ((database_parameters[item] | regex_replace('(?i)^(\\d+)K*$','\\1') | int ) * 1024) | string }) }}"
  with_items: "{{ memory_parameter_names }}"
  when: database_parameters[item] | default('') | regex_search('(?i)^(\\d+)K$')

- name: Expand Out Mega Memory Sizes
  set_fact:
    memory_expanded_values: "{{ memory_expanded_values | default({}) | combine({item: ((database_parameters[item] | regex_replace('(?i)^(\\d+)M*$','\\1') | int ) * 1024 * 1024) | string }) }}"
  with_items: "{{ memory_parameter_names }}"
  when: database_parameters[item] | default('') | regex_search('(?i)^(\\d+)M$')

- name: Expand Out Giga Memory Sizes
  set_fact:
    memory_expanded_values: "{{ memory_expanded_values | default({}) | combine({item: ((database_parameters[item] | regex_replace('(?i)^(\\d+)G*$','\\1') | int ) * 1024 * 1024 * 1024) | string }) }}"
  with_items: "{{ memory_parameter_names }}"
  when: database_parameters[item] | default('') | regex_search('(?i)^(\\d+)G$')

- name: What is Set
  debug:
    msg: "{{ item }} Expected: {{ ( memory_expanded_values | default({}) )[item] | default(database_parameters[item]) }} ; Actual: {{ database_parameters_actual[item] }}"
  with_items: "{{ database_parameters }}"

# Reject SGA_TARGET if SGA_MAX_SIZE is not large enough
# i.e. Compare SGA_TARGET with the Specified SGA_MAX_SIZE; or the current SGA_MAX_SIZE if it has not been specified
# We must use the expanded (bytes) values for comparison, not the values with K/M/G suffixes
- name: Check SGA_MAX_SIZE is large enough for SGA_TARGET
  assert:
    that: ( memory_expanded_values['sga_target'] | int ) <= ( memory_expanded_values['sga_max_size'] | default(database_parameters_actual['sga_max_size']) | int )
  when: database_parameters['sga_target'] is defined

# When setting the parameters, numeric values and booleans need to be unquoted and everything else should be single quoted
# Note that we require some special handling for boolean case sensitivity as Ansible will convert true or false strings to booleans
- name: Set Parameter
  script: set_parameter_values.sh {{ database_sid }} "{{ item }}"  "{{ database_parameters[item] | regex_replace('(?i)^(\d+|true|false)$','{NOBEGINQUOTE}\1{NOENDQUOTE}') | regex_replace('^(.*)$',"'\1'") | regex_replace("'{NOBEGINQUOTE}|{NOENDQUOTE}'") }}"
  register: setout
  with_items: "{{ database_parameters }}"
  when:
    - item not in memory_parameter_names
    - database_parameters[item] | regex_replace('(?i)true','TRUEVALUE') | regex_replace('(?i)false','FALSEVALUE') != database_parameters_actual[item] | regex_replace('(?i)true','TRUEVALUE') | regex_replace('(?i)false','FALSEVALUE')
    - database_parameters_spfile[item] == 'NORESTART'

- name: Set Parameter In Spfile
  script: set_parameter_values_spfile.sh {{ database_sid }} "{{ item }}"  "{{ database_parameters[item] | regex_replace('(?i)^(\d+|true|false)$','{NOBEGINQUOTE}\1{NOENDQUOTE}') | regex_replace('^(.*)$',"'\1'") | regex_replace("'{NOBEGINQUOTE}|{NOENDQUOTE}'") }}"
  register: setout_spfile
  with_items: "{{ database_parameters }}"
  when:
    - item not in memory_parameter_names
    - database_parameters[item] | regex_replace('(?i)true','TRUEVALUE') | regex_replace('(?i)false','FALSEVALUE') != database_parameters_actual[item] | regex_replace('(?i)true','TRUEVALUE') | regex_replace('(?i)false','FALSEVALUE')
    - database_parameters_spfile[item] == 'RESTART'

# Set SGA_TARGET directly if there is already enough SGA available and the change is more than one granule.
# (We cannot change memory component sizes by fractions of a granule, so this restriction prevents repeating attempts
#  to make small memory changes which will never complete to the exact number of bytes specified)
- name: Set SGA_TARGET
  script: set_parameter_values.sh {{ database_sid }} sga_target {{ database_parameters['sga_target'] }}
  register: setout_sga_target
  with_items: "sga_target-online"
  when:
    - database_parameters['sga_target'] is defined
    - (   ( memory_expanded_values['sga_target'] | int ) < ((database_parameters_actual['sga_target']  | int ) - granule_size)
      or  ( memory_expanded_values['sga_target'] | int ) > ((database_parameters_actual['sga_target']  | int ) + granule_size) )
    - ( memory_expanded_values['sga_target'] | int ) <= (database_parameters_actual['sga_max_size'] | int )

# Set SGA_TARGET in SPFILE if there is not enough memory but SGA_MAX_SIZE is being increased to accommodate it
# and the change in size is more than one granule
- name: Set SGA_TARGET In Spfile
  script: set_parameter_values_spfile.sh {{ database_sid }} sga_target {{ database_parameters['sga_target'] }}
  register: setout_sga_target_spfile
  with_items: "sga_target-spfile"
  when:
    - database_parameters['sga_target'] is defined
    - database_parameters['sga_max_size'] is defined
    - (   ( memory_expanded_values['sga_target'] | int ) < ((database_parameters_actual['sga_target']  | int ) - granule_size)
      or  ( memory_expanded_values['sga_target'] | int ) > ((database_parameters_actual['sga_target']  | int ) + granule_size) )
    - ( memory_expanded_values['sga_target'] | int ) <= ( memory_expanded_values['sga_max_size'] | int )

# Set SGA_MAX_SIZE in SPFILE if it has been changed by more than one granule
- name: Set SGA_MAX_SIZE
  script: set_parameter_values_spfile.sh {{ database_sid }} sga_max_size {{ database_parameters['sga_max_size'] }}
  register: setout_sga_maxsize_spfile
  with_items: "sga_max_size"
  when:
    - database_parameters['sga_max_size'] is defined
    - (   ( memory_expanded_values['sga_max_size'] | int ) < ((database_parameters_actual['sga_max_size']  | int ) - granule_size)
      or  ( memory_expanded_values['sga_max_size'] | int ) > ((database_parameters_actual['sga_max_size']  | int ) + granule_size) )

- name: Detect if Restart Required Debug
  debug:
    msg: "{{ item.stdout }}"
  with_items:
    - "{{ setout_spfile.results }}"
    - "{{ setout_sga_target_spfile.results }}"
    - "{{ setout_sga_maxsize_spfile.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.stdout is defined

- name: Detect if Restart Required
  set_fact:
    restart_database_instance: yes
  with_items: "{{ setout_spfile.results }} + {{ setout_sga_target_spfile.results }} + {{ setout_sga_maxsize_spfile.results }}"
  when: item is search('.*stdout*.')

- name: Restart Database Instance If Required
  shell: |
    . ~/.bash_profile
    ORACLE_SID={{ database_sid }}
    ORAENV_ASK=NO
    . oraenv > /dev/null;
    srvctl stop database -d {{ database_sid }}
    srvctl start database -d {{ database_sid }}
  register: restart
  when: (restart_database_instance is defined) and (restart_database_instance | bool | default(false))

# PGA parameter changes do not require a restart of the database instance and is safe to place
# at the end of the playbook as their respective values depend on other database parameter values.
# PGA_AGGREGATE_LIMIT is dependant on both PGA_AGGREGATE_TARGET and PROCESESS value
#
# Example:
# PGA_AGGREGATE_LIMIT >= MAX(PGA_AGGREGATE_TARGET * 2, PROCESESS * 3Mb, 2Gb)
#
# PGA_AGGREGATE_TARGET is dependant on both PGA_AGGREGATE_LIMIT and SGA_TARGET value
#
# Example:
# PGA_AGGREGATE_TARGET <= ((90% * PHYSICAL MEMORY) - SGA_TARGET) / 2
# PGA_AGGREGATE_TARGET <= PGA_AGGREGATE_LIMIT / 2

# Ensure PGA_AGGREGATE_LIMIT value is set to no more than Oracle allowed value to avoid ORA-00093 errors
- block:
    - name: Get processes value
      script: get_parameter_values.sh {{ database_sid }} "'processes'"
      register: current_processes
      changed_when: false

    - name: Set processes limit
      set_fact:
        processes_value: '{{ ( current_processes.stdout_lines[0].split(",")[1] | int ) * 3 * 1024 * 1024 }}'

    - block:
        - name: Get pga target value
          script: get_parameter_values.sh {{ database_sid }} "'pga_aggregate_target'"
          register: current_pga_target
          changed_when: false

        - name: Set pga target limit
          set_fact:
            pga_target_value: '{{ ( current_pga_target.stdout_lines[0].split(",")[1] | int * 2 ) }}'

        - name: Calculate maximum allowed PGA_AGGREGATE_LIMIT value when expected pga target is not set or expected pga target is equal to actual pga target
          set_fact:
            pga_aggregate_limit_allowed: "{{ [ ( processes_value | int ), ( pga_target_value | int ), (2 * 1024 * 1024 * 1024) ] | max }}"

        - name: Compare maximum allowed PGA_AGGREGATE_LIMIT value with expected value
          assert:
            that: memory_expanded_values['pga_aggregate_limit'] | int >= pga_aggregate_limit_allowed | int
            fail_msg: "Please ensure PGA_AGGREGATE_LIMIT value is greater than or equal to {{ pga_aggregate_limit_allowed }} bytes"

        - name: Set PGA_AGGREGATE_LIMIT
          script: set_parameter_values.sh {{ database_sid }} pga_aggregate_limit {{ database_parameters['pga_aggregate_limit'] }}
          with_items: "pga_aggregate_limit"
          register: setout_pga_limit

        - set_fact:
            set_pga_aggregate_limit_later: false

      when:
        - database_parameters['pga_aggregate_target'] is not defined
          or ( database_parameters['pga_aggregate_target'] is defined  and ( memory_expanded_values['pga_aggregate_target'] | int == database_parameters_actual['pga_aggregate_target'] | int ) )

    - block:
        - name: Calculate maximum allowed PGA_AGGREGATE_LIMIT value when expected pga target is set and not equal to actual pga target
          set_fact:
            pga_aggregate_limit_allowed: "{{ [ ( processes_value | int ), (( memory_expanded_values['pga_aggregate_target']  | int ) * 2), (2 * 1024 * 1024 * 1024) ] | max }}"

        - name: Compare maximum allowed PGA_AGGREGATE_LIMIT value with expected value
          assert:
            that: memory_expanded_values['pga_aggregate_limit'] | int >= pga_aggregate_limit_allowed | int
            fail_msg: "Please ensure PGA_AGGREGATE_LIMIT value is greater than or equal to {{ pga_aggregate_limit_allowed }} bytes"

        - set_fact:
            set_pga_aggregate_limit_later: true

      when:
        - database_parameters['pga_aggregate_target'] is defined
        - memory_expanded_values['pga_aggregate_target'] | int != database_parameters_actual['pga_aggregate_target'] | int

  when:
    - database_parameters['pga_aggregate_limit'] is defined
    - memory_expanded_values['pga_aggregate_limit'] | int != database_parameters_actual['pga_aggregate_limit'] | int

# Ensure PGA_AGGREGATE_TARGET value is set to no more than Oracle allowed value to avoid ORA-00855,ORA-0856 errors
- block:
    - name: Get 90% value of total memory allocated to server
      shell: |
        grep ^MemTotal: /proc/meminfo | awk '{printf("%.f",$2*1024*0.9)}'
      register: memtotal

    - name: Get sga_target value
      script: get_parameter_values.sh {{ database_sid }} "'sga_target'"
      register: current_sga_target
      changed_when: false

    - name: Calculate sga limit
      set_fact:
        sga_limit: '{{ ((( memtotal.stdout | int ) - ( current_sga_target.stdout_lines[0].split(",")[1] | int )) / 2 ) | round | int }}'

    - name: Calculate pga limit if already set
      set_fact:
        pga_limit: "{{ (( database_parameters_actual['pga_aggregate_limit'] | int  ) / 2 ) | round | int }}"
      when:
        - not set_pga_aggregate_limit_later | default(false) | bool

    - name: Calculate pga limit if not set
      set_fact:
        pga_limit: "{{ (( memory_expanded_values['pga_aggregate_limit'] | int ) / 2 ) | round | int }}"
      when:
        - set_pga_aggregate_limit_later | default(false) | bool

    - name: Set allowed pga_aggregate_target limit
      set_fact:
        pga_aggregate_target_allowed: "{{ [ ( sga_limit | int), ( pga_limit | int ) ] | min }}"

    - name: Compare maximum allowed PGA_AGGREGATE_TARGET value with expected value
      assert:
        that:
          - memory_expanded_values['pga_aggregate_target'] | int <=  pga_aggregate_target_allowed | int
        fail_msg:
          - "Please ensure PGA_AGGREGATE_TARGET value is less than or equal to {{ pga_aggregate_target_allowed }} bytes"

    - name: Calculate if pga_aggregate_limit temporary value is to be set
      set_fact:
        pga_aggregate_limit_tmp_value: "{{ (( memory_expanded_values['pga_aggregate_target'] | int ) * 2 ) | round | int }} "
      when: memory_expanded_values['pga_aggregate_target'] | int > ( database_parameters_actual['pga_aggregate_limit'] | int ) / 2

    - name: Set PGA_AGGREGATE_LIMIT to temporary value
      script: set_parameter_values.sh {{ database_sid }} pga_aggregate_limit {{ pga_aggregate_limit_tmp_value }}
      when: memory_expanded_values['pga_aggregate_target'] | int > ( database_parameters_actual['pga_aggregate_limit'] | int ) / 2

    - name: Set PGA_AGGREGATE_TARGET
      script: set_parameter_values.sh {{ database_sid }} pga_aggregate_target {{ database_parameters['pga_aggregate_target'] }}
      with_items: "pga_aggregate_target"
      register: setout_pga_target

    - name: Set PGA_AGGREGATE_LIMIT if not already set
      script: set_parameter_values.sh {{ database_sid }} pga_aggregate_limit {{ database_parameters['pga_aggregate_limit'] }}
      with_items: "pga_aggregate_limit"
      register: setout_pga_limit
      when: set_pga_aggregate_limit_later | default(false) | bool

  when:
    - database_parameters['pga_aggregate_target'] is defined
    - memory_expanded_values['pga_aggregate_target'] | int != database_parameters_actual['pga_aggregate_target'] | int

- name: Report Output of System Alteration
  debug:
    msg: "{{ item.stdout }}"
  with_items:
    - "{{ setout.results }}"
    - "{{ setout_spfile.results }}"
    - "{{ setout_sga_target.results }}"
    - "{{ setout_sga_target_spfile.results }}"
    - "{{ setout_sga_maxsize_spfile.results }}"
    - "{{ setout_pga_target.results }}"
    - "{{ setout_pga_limit.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.stdout is defined

# Additional Non-SPFILE Parameters:  SQL*Net network configuration parameters set-up
- name: Set SQL*Net Network Parameters If Required
  include_tasks: sqlnet_parameters.yml
  when: sqlnet_parameters is defined

# Additional Non-SPFILE Parameters:  Data Guard configuration parameters set-up
- name: Set Data Guard Parameters If Required
  include_tasks: data_guard_parameters.yml
  when: data_guard_parameters is defined

# Additional Non-SPFILE Parameters: AWR configuration parameters set-up
# We only need to run this on the Primary Database and Only if Management Packs are enabled
- name: Set AWR Configuration if Required
  include_tasks: awr_parameters.yml
  when:
    - database_parameters.control_management_pack_access in ['DIAGNOSTICS','DIAGNOSTIC+TUNING']
    - database_primary_sid is defined
    - awr_retention_days is defined
