#!/bin/bash

DEBUG=false   # set to false to actually execute, true to just print the commands

run_cmd() {
    if [ "$DEBUG" = true ]; then
        echo "[DEBUG] $1"
    else
        eval "$1"
    fi
}

AGENT_HOME={{ agent_home }}
export JAVA_HOME=${AGENT_HOME}/oracle_common/jdk/jre
EMCLI_DIR={{ app_dir }}/emcli
export PATH=${EMCLI_DIR}:/usr/local/bin:${PATH}
ASM_USERNAME={{ asm_monitoring_secret_username|lower }}
PRIMARY_USERNAME={{ db_monitoring_secret_primary_username }}
PRIMARY_ROLE={{ db_monitoring_secret_primary_role }}
STANDBY_USERNAME={{ db_monitoring_secret_standby_username }}
STANDBY_ROLE={{ db_monitoring_secret_standby_role }}

HOSTNAME=$(hostname)
HOST_FQDN_NAME=$(hostname --fqdn)

# Default Slack channel for OEM Alerts
DEFAULT_SLACK_CHANNEL="#hmpps-oem-alerts"

INSTANCE_ID=$(curl http://169.254.169.254/latest/meta-data/instance-id 2>/dev/null)
APPLICATION=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=application" --query 'Tags[0].Value' --output text)
ENVIRONMENT_NAME=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=environment-name" --query 'Tags[0].Value' --output text)
if [[ "${APPLICATION}" == "delius" ]];
then
   DELIUS_ENVIRONMENT=$(aws ec2 describe-tags --filters "Name=resource-id,Values=$INSTANCE_ID" "Name=key,Values=delius-environment" --query 'Tags[0].Value' --output text)
fi


if [[ $? -ne 0 ]]; then
  echo "Failed to fetch EC2 tags"
  exit 1
fi

# Extract the environment name from the tag, which should be found on all hosts
SHORT_ENV=$(echo "${ENVIRONMENT_NAME}" | awk -F'-' '{print $NF}')

# Check if the environment name matches one of the expected values
case "$SHORT_ENV" in
  development|test|stage|preproduction|production|missioncritical)
    # Capitalize the first character
    LIFECYCLE_STATUS="${SHORT_ENV^}"
    # Replace Preproduction with Stage as Oracle does not support Preproduction
    [[ "$LIFECYCLE_STATUS" == "Preproduction" ]] && LIFECYCLE_STATUS="Stage"
    [[ "$LIFECYCLE_STATUS" == "Missioncritical" ]] && LIFECYCLE_STATUS="MissionCritical"
    ;;
  *)
    # Default value if the environment name does not match
    LIFECYCLE_STATUS="Unknown"
    ;;
esac

# For OEM hosts we do not use the FQDN for the targets  
if [[ -n "${APPLICATION}" && "${APPLICATION}" == "hmpps-oem" ]]; then
   HOST_FQDN_NAME=${HOSTNAME}
fi

if [[ "${APPLICATION}" == "delius" || "${APPLICATION}" == "delius-mis"  ]]; then
   if [[ "${LIFECYCLE_STATUS}" == "Production" || "${LIFECYCLE_STATUS}" == "MissionCritical" ]]; then
      CONTACT="#delius-aws-oracle-prod-alerts"
   else
      CONTACT="#delius-aws-oracle-dev-alerts"
   fi
else 
   if [[ "${LIFECYCLE_STATUS}" == "Production" || "${LIFECYCLE_STATUS}" == "MissionCritical" ]]; then
      CONTACT="#dba_alerts_prod"
   else
      CONTACT="#dba_alerts_devtest"
   fi
fi

# We use CONTACT to determine which Slack channel to route incidents
TARGET_PROPERTIES="orcl_gtp_lifecycle_status:${LIFECYCLE_STATUS};orcl_gtp_line_of_bus:${APPLICATION};orcl_gtp_contact:${CONTACT};"

# Function to retrieve passwords from AWS Secrets Manager
get_password() {
  USERNAME=$1
  ORACLE_SID=$2
  if [[ "${ORACLE_SID}" == "EMREP" || "${ORACLE_SID}" == *RCVCAT* ]]; then
    aws secretsmanager get-secret-value --secret-id "/oracle/database/${ORACLE_SID}/passwords" --region eu-west-2 --query SecretString --output text | jq -r .${USERNAME}
  else
    if [[ "${APPLICATION}" == "delius" ]]; then
      SECRET_ID="delius-core-${DELIUS_ENVIRONMENT}-oracle-db-dba-passwords"
    elif [ "$APPLICATION" = "delius-mis" ]
    then
      DATABASE_TYPE=$(aws ec2 describe-tags --filters "Name=resource-id,Values=${INSTANCEID}" "Name=key,Values=database" --query 'Tags[].Value' --output text | cut -d'_' -f1)
      SECRET_ID="delius-mis-${DELIUS_ENVIRONMENT}-oracle-${DATABASE_TYPE}-db-dba-passwords"
    else
      # Try the format used for nomis and oasys
      if [[ "${USERNAME,,}" == "asmsnmp" ]]; then
         # ASM monitoring user
         SECRET_ID="/ec2/${HOSTNAME}/asm-passwords"
      else
         # DBSNMP user
         SECRET_ID="/oracle/database/${ORACLE_SID}/passwords"
      fi
    fi
    # get the password from AWS Secrets Manager and filter it using jq so it doesn't matter if the key is upper or lower case
    PASSWORD=$(aws secretsmanager get-secret-value --secret-id ${SECRET_ID} --region eu-west-2 --query SecretString --output text 2>/dev/null | jq -r --arg key "${USERNAME}" 'to_entries[] | select(.key | ascii_downcase == ($key | ascii_downcase)) | .value')
    echo "${PASSWORD}"
  fi
}

INVENTORY_LOC=/u01/app/oraInventory
cd ${EMCLI_DIR}
if [ `grep "^+ASM" /etc/oratab | awk -F: '{ print $2 }'| wc -l` -eq 1 ]
then
        GRID_HOME_NAME=`grep CRS=  ${INVENTORY_LOC}/ContentsXML/inventory.xml | awk -F\" '{ print $2 }'`
        GRID_HOME=`grep CRS= ${INVENTORY_LOC}/ContentsXML/inventory.xml | awk -F\" '{ print $4 }'`
        # Just grep for the GRID_HOME_NAME as it adds additional information to the name stored in oem
        TARGET_FOUND=$(${AGENT_HOME}/bin/emctl config agent listtargets | grep "${GRID_HOME_NAME}" | grep ", oracle_home" | cut -d, -f1 | sed 's/^\[//')
        if [[ -z "${TARGET_FOUND}" ]]; then
          echo "emcli add target Grid Infrastructure home"
          run_cmd "./emcli add_target -name=\"${GRID_HOME_NAME}_${HOST_FQDN_NAME}\" -type=\"oracle_home\" -host=\"${HOST_FQDN_NAME}\" -properties=\"HOME_TYPE:O;INSTALL_LOCATION:${GRID_HOME};INVENTORY:${INVENTORY_LOC};${TARGET_PROPERTIES}\""
        fi
        TARGET_FOUND=$(${AGENT_HOME}/bin/emctl config agent listtargets | grep "has_${HOST_FQDN_NAME}" | grep ", has" | cut -d, -f1 | sed 's/^\[//')
        if [[ -z "${TARGET_FOUND}" ]]; then
          echo "emcli add HAS target"
          run_cmd "./emcli add_target -name=\"has_${HOST_FQDN_NAME}\" -type=\"has\" -host=\"${HOST_FQDN_NAME}\" -properties=\"OracleHome:${GRID_HOME};${TARGET_PROPERTIES}\""
        fi
        TARGET_FOUND=$(${AGENT_HOME}/bin/emctl config agent listtargets | grep "+ASM_${HOST_FQDN_NAME}" | grep ", osm_instance" | cut -d, -f1 | sed 's/^\[//')
        # Search needs to use case sensitive keys so we convert all to lowercase (as different apps use different case)
        ASMSNMPPASSWORD=$(get_password ${ASM_USERNAME})
        if [[ $? -ne 0 || -z "$ASMSNMPPASSWORD" ]]; then
            echo "Error: Unable to retrieve ASM monitoring password from Secrets Manager. Please check the secret name and permissions."
            exit 1
        fi
        if [[ -z "${TARGET_FOUND}" ]]; then
          echo "emcli add ASM target"
          run_cmd "./emcli add_target -name=\"+ASM_${HOST_FQDN_NAME}\" -type=\"osm_instance\" -host=\"${HOST_FQDN_NAME}\" -credentials=\"UserName:${ASM_USERNAME};password:${ASMSNMPPASSWORD};Role:sysdba\" -properties=\"SID:+ASM;Port:1521;OracleHome:${GRID_HOME};MachineName:${HOST_FQDN_NAME};${TARGET_PROPERTIES}\""
        else
          # ASM target already exists, so we need to modify it with updated credentials
          run_cmd "./emcli modify_target -name=\"+ASM_${HOST_FQDN_NAME}\" -type=\"osm_instance\" -credentials=\"UserName:${ASM_USERNAME};password:${ASMSNMPPASSWORD};Role:sysdba\""
        fi
        unset ASMSNMPPASSWORD
        TARGET_FOUND=$(${AGENT_HOME}/bin/emctl config agent listtargets | grep "LISTENER_${HOST_FQDN_NAME}" | grep ", oracle_listener" | cut -d, -f1 | sed 's/^\[//')
        if [[ -z "${TARGET_FOUND}" ]]; then
          echo "emcli add Listener"
          run_cmd "./emcli add_target -name=\"LISTENER_${HOST_FQDN_NAME}\" -type=\"oracle_listener\" -host=\"${HOST_FQDN_NAME}\" -properties=\"LsnrName:LISTENER;ListenerOraDir:${GRID_HOME}/network/admin;Port:1521;OracleHome:${GRID_HOME};Machine:${HOST_FQDN_NAME};${TARGET_PROPERTIES}\""
        fi
fi

if [ `grep "db"  /etc/oratab | awk -F: '{ print $2 }'| wc -l` -gt 0 ]
then
        DB_INFO=$(grep db ${INVENTORY_LOC}/ContentsXML/inventory.xml| grep -v REMOVED | awk -F\" '{ printf("%s:%s\n", $2,$4)}')
        for i in ${DB_INFO[@]}
        do
            DB_HOME_NAME=$(echo ${i} | awk -F: '{ print $1 }')
            DB_HOME=$(echo ${i} | awk -F: '{ print $2 }')
            TARGET_FOUND=$(${AGENT_HOME}/bin/emctl config agent listtargets | grep "${DB_HOME_NAME}" | grep ", oracle_home" | cut -d, -f1 | sed 's/^\[//')
            if [[ -z "${TARGET_FOUND}" ]]; then
              echo "emcli add target database homes"
              run_cmd "./emcli add_target -name=\"${DB_HOME_NAME}_${HOST_FQDN_NAME}\" -type=\"oracle_home\" -host=\"${HOST_FQDN_NAME}\" -properties=\"HOME_TYPE:O;INSTALL_LOCATION:${DB_HOME};INVENTORY:${INVENTORY_LOC};${TARGET_PROPERTIES}\""
            fi
        done
fi

function is_lifecycle_upgrade()
{
   # This function is used to determine if a change in target Lifecycle Status is considered an Upgrade of importance.
   # If the Lifecycle has already been set we only automatically change it if it is to increase its importance.  
   # (Downgrading of a target importance is risky as incidents may be missed, so should only be done manually).
   OLD_LIFECYCLE=$1
   NEW_LIFECYCLE=$2
   case "$OLD_LIFECYCLE" in
   None|Development) 
      UPGRADE=true;
      ;;
   Test)
      case "$NEW_LIFECYCLE" in
         Staging|Stage|Production|MissionCritical)
            UPGRADE=true;
            ;;
         *)
            UPGRADE=false;
            ;;
      esac
      ;;
   Staging|Stage)
      case "$NEW_LIFECYCLE" in
         Production|MissionCritical)
            UPGRADE=true;
            ;;
         *)
            UPGRADE=false;
            ;;
      esac 
      ;;
   Production)
      case "$NEW_LIFECYCLE" in
         MissionCritical)
            UPGRADE=true;
            ;;
         *)
            UPGRADE=false;
            ;;
      esac 
      ;;
   "")
      UPGRADE=true
      ;;
   *)
      UPGRADE=false
      ;;
   esac
   echo $UPGRADE
}

# Set Properties for Targets
function set_target_properties()
{
   TARGET_TYPE=$1
   TARGET_NAME=$2
   TARGET_LINE_OF_BUSINESS=$3
   TARGET_CONTACT=$4

   echo "Setting properties for target: ${TARGET_NAME} of type ${TARGET_TYPE}"
   # If the target is a Database System then we want to propagate the properties to all members of the target
   [[ ${TARGET_TYPE} == "oracle_dbsys" ]] && PROPAGATE="-propagate_to_members" || PROPAGATE="" 

   # We need to check if the target already has a lifecycle status set
   EXISTING_LIFECYCLE=$(./emcli list -resource=TargetProperties -search="TARGET_NAME='${TARGET_NAME}'" -search="TARGET_TYPE='${TARGET_TYPE}'" -search="PROPERTY_NAME='orcl_gtp_lifecycle_status'" -columns="PROPERTY_VALUE" -script -noheader)
   # We change the subseparator from colon as the agent (oracle_emd) target already contains a colon

   # We'll handle EXISTING_LIFECYCLE being empty in the function
   if [[ "$(is_lifecycle_upgrade "${EXISTING_LIFECYCLE}" "${LIFECYCLE_STATUS}")" == "true" ]]; then
      run_cmd "./emcli set_target_property_value -subseparator=property_records=\"@@\" -property_records=\"${TARGET_NAME}@@${TARGET_TYPE}@@LifeCycle Status@@${LIFECYCLE_STATUS}\" ${PROPAGATE}"
   fi

   run_cmd "./emcli set_target_property_value -subseparator=property_records=\"@@\" -property_records=\"${TARGET_NAME}@@${TARGET_TYPE}@@Line of Business@@${TARGET_LINE_OF_BUSINESS}\" ${PROPAGATE}"
   run_cmd "./emcli set_target_property_value -subseparator=property_records=\"@@\" -property_records=\"${TARGET_NAME}@@${TARGET_TYPE}@@Contact@@${TARGET_CONTACT}\" ${PROPAGATE}"
}

if [ `grep "db"  /etc/oratab | awk -F: '{ print $2 }'| wc -l` -gt 0 ]
then
        for i in `grep db  /etc/oratab| grep -v "^#" | awk -F: '{ print $1 }'`
        do
            echo ${i}
            DB_HOME=$(grep ${i} /etc/oratab | awk -F: '{ print $2 }')
            DB_ROLE=$($DB_HOME/bin/srvctl config database -d ${i} | awk -F: '/Database role/{print $2}' | xargs)
            if [[ "$DB_ROLE" == "PRIMARY" ]]; then
               MONITORING_USER=${PRIMARY_USERNAME}
               MONITORING_ROLE=${PRIMARY_ROLE}
            else
               MONITORING_USER=${STANDBY_USERNAME}
               MONITORING_ROLE=${STANDBY_ROLE}
            fi

            DBPASSWORD=$(get_password ${MONITORING_USER} ${i})
            if [[ $? -ne 0 || -z "$DBPASSWORD" ]]; then
                echo "Error: Unable to retrieve database password for ${i} from Secrets Manager. Please check the secret name and permissions."
                exit 1
            fi
            TARGET_FOUND=$(${AGENT_HOME}/bin/emctl config agent listtargets | grep "${i}" | grep ", oracle_database" | cut -d, -f1 | sed 's/^\[//')
            if [[ -z "${TARGET_FOUND}" ]]; then
                run_cmd "./emcli add_target -name=\"${i}\" -type=\"oracle_database\" -host=\"${HOST_FQDN_NAME}\" -credentials=\"UserName:${MONITORING_USER};password:${DBPASSWORD};Role:${MONITORING_ROLE}\" -properties=\"SID:${i};Port:1521;OracleHome:${DB_HOME};MachineName:${HOST_FQDN_NAME};${TARGET_PROPERTIES}\""
                # oracle_dbsys added  due to encountered bug     
                if [[ `./emcli get_targets -targets=oracle_dbsys | grep ${i} | wc -l` -eq 0 ]] && [[ "$DB_ROLE" == "PRIMARY" ]];
                then 
	                run_cmd "./emcli add_target -name=\"${i}_sys\" -type=\"oracle_dbsys\""
		             run_cmd "./emcli create_assoc -assoc_type=\"relies_on_key_component\" -source=\"${i}_sys:oracle_dbsys\" -dest=\"${i}:oracle_database\""
                fi
                set_target_properties oracle_dbsys "${i}_sys" "${APPLICATION}" "${CONTACT}"
            else
                run_cmd "./emcli modify_target -name=\"${i}\" -type=\"oracle_database\" -credentials=\"UserName:${MONITORING_USER};password:${DBPASSWORD};Role:${MONITORING_ROLE}\""
            fi
            unset DBPASSWORD
        done
fi

# Set the Properties for Internal Targets if Not Already Set
HOST_TARGET_NAME=$(${AGENT_HOME}/bin/emctl config agent listtargets | grep ", host]" | cut -d, -f1 | sed 's/^\[//')
set_target_properties host "${HOST_TARGET_NAME}" "${APPLICATION}" "${CONTACT}"
AGENT_TARGET_NAME=$(${AGENT_HOME}/bin/emctl config agent listtargets | grep ", oracle_emd]" | cut -d, -f1 | sed 's/^\[//')
set_target_properties oracle_emd "${AGENT_TARGET_NAME}" "${APPLICATION}" "${CONTACT}"

# Set the Properties for the Agent Oracle Home if Not Already Set
AGENT_ORACLE_HOME=$(./emcli list -resource="TargetProperties" -search="TARGET_NAME='${AGENT_TARGET_NAME}'" -search="PROPERTY_NAME='AgentOracleHome'" -column="PROPERTY_VALUE" -script -noheader)
AGENT_ORACLE_HOME_TARGET=$(./emcli list -resource="Targets" -search="HOST_NAME='${HOST_FQDN_NAME}'" -search="TARGET_TYPE='oracle_home'" -columns='TARGET_NAME' -script -noheader | xargs -I '{}' ./emcli list -resource="TargetProperties" -search="TARGET_NAME='{}'" -search="TARGET_TYPE='oracle_home'" -search="PROPERTY_NAME='INSTALL_LOCATION'" -columns="PROPERTY_VALUE,TARGET_NAME" -script -noheader | grep -E "^${AGENT_ORACLE_HOME}\s+" | cut -f2)
set_target_properties oracle_home "${AGENT_ORACLE_HOME_TARGET}" "${APPLICATION}" "${CONTACT}"

# For any remaining targets in OEM which do not have Lifecycle, Contact or Line of Business properties already set, 
# assign those as internal OEM (as opposed to Application) targets

IFS=$'\n'
for TARGET in $(./emcli get_targets -noheader -format="name:script;column_separator:|"); do
    echo "Checking ${TARGET}"
    
    TARGET_TYPE=$(echo "$TARGET" | cut -d"|" -f3)
    TARGET_NAME=$(echo "$TARGET" | cut -d"|" -f4)

    # Skip if it's a group target
    [[ "$TARGET_TYPE" == "group" ]] && continue

    EXISTING_CONTACT=$(./emcli list -resource="TargetProperties" -search="TARGET_NAME='${TARGET_NAME}'" \
                        -search="TARGET_TYPE='${TARGET_TYPE}'" -search="PROPERTY_NAME='orcl_gtp_contact'" -script -noheader)
    EXISTING_LINE_OF_BUSINESS=$(./emcli list -resource="TargetProperties" -search="TARGET_NAME='${TARGET_NAME}'" \
                        -search="TARGET_TYPE='${TARGET_TYPE}'" -search="PROPERTY_NAME='orcl_gtp_line_of_bus'" -script -noheader)
    EXISTING_LIFECYCLE=$(./emcli list -resource="TargetProperties" -search="TARGET_NAME='${TARGET_NAME}'" \
                        -search="TARGET_TYPE='${TARGET_TYPE}'" -search="PROPERTY_NAME='orcl_gtp_lifecycle_status'" -script -noheader)

    if [[ -z ${EXISTING_CONTACT} || -z ${EXISTING_LINE_OF_BUSINESS} || -z ${EXISTING_LIFECYCLE} ]]; then

        # Extract line of business from FQDN — assume it's the second label in the hostname
        HOST_SUFFIX=$(echo "$TARGET_NAME" | cut -d'.' -f2)
        LINE_OF_BUSINESS="${HOST_SUFFIX,,}"  # lowercase, just in case

        # Determine Slack channel
        if [[ "$TARGET_NAME" == "*oem*" ]]; then
            SLACK_CHANNEL="${DEFAULT_SLACK_CHANNEL}"
        elif [[ "$LINE_OF_BUSINESS" == "*delius*" ]]; then
            if [[ "$LIFECYCLE" == "Production" || "$LIFECYCLE" == "MissionCritical" ]]; then
                SLACK_CHANNEL="#delius-aws-oracle-prod-alerts"
            else
                SLACK_CHANNEL="#delius-aws-oracle-dev-alerts"
            fi
        else
            if [[ "$LIFECYCLE" == "Production" || "$LIFECYCLE" == "MissionCritical" ]]; then
                SLACK_CHANNEL="#dba_alerts_prod"
            else
                SLACK_CHANNEL="#dba_alerts_devtest"
            fi
        fi

        set_target_properties "${TARGET_TYPE}" "${TARGET_NAME}" "${LINE_OF_BUSINESS}" "${SLACK_CHANNEL}"
    fi
done
unset IFS
