---
- name: Set DB facts
  set_fact:
    db_sid: "{{ db_configs[ db_name ].instance_name }}"
    db_passwords_secret: "/oracle/database/{{ db_name }}/passwords"
  no_log: true

- name: Get DB secrets {{ db_passwords_secret }}
  set_fact:
    db_passwords: "{{ lookup('amazon.aws.aws_secret', db_passwords_secret) }}"
  no_log: true

- name: Get DB sys password
  set_fact:
    db_sys_password: "{{ db_passwords.sys }}"
  no_log: true

- name: Check password is extracted
  ansible.builtin.set_fact:
    db_sys_password_set: true
  when:
    - db_sys_password |length > 0
    - db_sid |length > 0

- name: Fail if missing secrets
  ansible.builtin.fail:
    msg: Ensure SYS password exists for {{ db_name }} database
  when: not  db_sys_password_set |default(false)

- name: Copy restore point creation script
  ansible.builtin.template:
    src: "create_restore_point.sql.j2"
    dest: "{{ stage }}/create_restore_point.sql"
    mode: 0600
    owner: "{{ oracle_install_user }}"
    group: "{{ oracle_install_group }}"

- name: Create restore point in database {{ db_name }}
  become_user: "{{ oracle_install_user }}"
  ansible.builtin.shell: |
    set -eo pipefail
    main() {
      . ~/.bash_profile
      . oraenv
      sqlplus -s /nolog <<EOF
      connect / as sysdba
      @{{ stage }}/create_restore_point.sql
      exit
    EOF
    }
    main 2>&1 | logger -p local3.info -t ansible-oracle-restore-point
  environment:
    ORAENV_ASK: "NO"
    ORACLE_SID: "{{ db_sid }}"

- name: Check restore point created successfully or not in {{ db_name }}
  ansible.builtin.shell: grep "Restore point created." {{ stage }}/{{ db_name }}_restore_point.log  | wc -l
  register: restore_point_check

- name: Fail if missing SSM parameters
  ansible.builtin.fail:
    msg: Restore point creation failed for {{ db_name }}
  when: restore_point_check.stdout == "0"
