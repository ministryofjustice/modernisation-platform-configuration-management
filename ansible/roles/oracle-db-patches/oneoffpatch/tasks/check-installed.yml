---

# -- Grid Infrastructure

- name: Check if patch {{ patch_number }} is installed on Grid Infrastructure
  shell: |
         grep -Ec "<patchID>{{ patch_number }}</patchID>" /tmp/grid_opatch_out.xml || [[ $? == 1 ]]
  register: grid_patch_present
  changed_when: false 
  when: grid_patch | bool

- name: Set Patch {{ patch_number }} Required on Grid
  set_fact:
     required_patches: "{{ required_patches|combine({patch_id: {'install_to_grid_required': not (grid_patch_present.stdout | bool) }}, recursive=true) }}"
  when: 
     - grid_patch | bool 
     - grid_patch_version_compatible | bool 

 # If the patch replaces an earlier patch check if the earlier patch is installed and, if so, set the rollback flag
- name: Check if patch {{ patch_number }} requires rollback of another patch
  shell: |
        grep -Ec "<patchID>{{ patch_to_replace }}</patchID>" /tmp/grid_opatch_out.xml || [[ $? == 1 ]]
  register: grid_patch_replacement
  changed_when: false
  when: 
    - required_patches[patch_id].install_to_grid_required
    - patch_to_replace != 'none'

- name: Set Patch {{ patch_to_replace }} to be Rolled Back from Grid Infrastructure
  set_fact:
     required_patches: "{{ required_patches|combine({patch_id: {'grid_rollback_required': true }}, recursive=true) }}"
  when: 
     - required_patches[patch_id].install_to_grid_required
     - patch_to_replace != 'none'
     - grid_patch_replacement.stdout | bool 

- name: Mark Replaced Patch {{ patch_to_replace }} Not To Be Installed On Grid Infrastructure
  set_fact:
      required_patches: "{{ required_patches | combine({ ( 'p' + patch_to_replace ): {'install_request':false,'install_to_grid_required':false}}, recursive=true) }}"
  when: 
      - grid_patch_version_compatible
      - patch_to_replace != 'none'

# -- Database

- name: Check if patch {{ patch_number }} is installed on Database 
  shell: |
         grep -Ec "<patchID>{{ patch_number }}</patchID>" /tmp/database_opatch_out.xml || [[ $? == 1 ]]
  register: database_patch_present
  changed_when: false
  when: database_patch | bool
  
- name: Set Patch {{ patch_number }} Required on Database
  set_fact:
     required_patches: "{{ required_patches|combine({patch_id: {'install_to_database_required': not (database_patch_present.stdout | bool) }}, recursive=true) }}"
  when: 
     - database_patch | bool
     - database_patch_version_compatible | bool

 # If the patch replaces an earlier patch check if the earlier patch is installed and, if so, set the rollback flag
- name: Check if patch {{ patch_number }} requires rollback of another patch
  shell: |
        grep -Ec "<patchID>{{ patch_to_replace }}</patchID>" /tmp/database_opatch_out.xml || [[ $? == 1 ]]
  register: database_patch_replacement
  changed_when: false
  when: 
    - required_patches[patch_id].install_to_database_required
    - patch_to_replace != 'none'

- name: Set Patch {{ patch_to_replace }} to be Rolled Back from Database
  set_fact:
     required_patches: "{{ required_patches|combine({patch_id: {'database_rollback_required': true }}, recursive=true) }}"
  when: 
     - required_patches[patch_id].install_to_database_required
     - patch_to_replace != 'none'
     - database_patch_replacement.stdout | bool 

- name: Mark Replaced Patch {{ patch_to_replace }} Not To Be Installed On Database
  set_fact:
      required_patches: "{{ required_patches | combine({ ( 'p' + patch_to_replace ): {'install_request':false,'install_to_database_required':false}}, recursive=true) }}"
  when: 
      - database_patch_version_compatible
      - patch_to_replace != 'none'