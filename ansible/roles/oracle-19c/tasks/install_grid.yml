---
- name: Check oracle 19c Grid Infrastructure installed
  ansible.builtin.stat:
    path: "{{ oracle_inventory }}/orainstRoot.sh"
  register: grid_software_installed

- name: Install oracle 19c Grid Infrastructure
  block:
    - name: Create response files
      template:
        src: "{{ item }}.j2"
        dest: "{{ stage }}/{{ item }}"
        owner: "{{ oracle_install_user }}"
        group: "{{ oracle_install_group }}"
        mode: "0700"
      loop:
        - "{{ grid_response_file }}"
        - "{{ grid_install_script }}"

    - name: Unzip Oracle 19c Grid Infrastructure software
      become_user: "{{ oracle_install_user }}"
      ansible.builtin.unarchive:
        src: "{{ stage }}/{{ grid_software }}"
        dest: "{{ grid_home }}"
        owner: "{{ oracle_install_user }}"
        group: "{{ oracle_install_group }}"
        remote_src: yes

    - name: Unzip grid psu patch software
      ansible.builtin.unarchive:
        src: "{{ stage }}/{{ psu_patch }}"
        dest: "{{ stage }}/psu"
        owner: "{{ oracle_install_user }}"
        group: "{{ oracle_install_group }}"
        remote_src: yes

    - name: Upgrade OPatch in grid home
      ansible.builtin.unarchive:
        src: "{{ stage }}/{{ opatch }}"
        dest: "{{ grid_home }}"
        owner: "{{ oracle_install_user }}"
        group: "{{ oracle_install_group }}"
        remote_src: yes

    - name: Run oracle grid install
      become: true
      become_user: "{{ oracle_install_user }}"
      ansible.builtin.shell: |
        main() {
          echo {{ stage }}/{{ grid_install_script }}
          {{ stage }}/{{ grid_install_script }}
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-db
      register: grid_install_output
      async: 1800
      poll: 30
      vars:
        ansible_remote_tmp: /tmp/.ansible
        ansible_async_dir: /tmp/.ansible_async

    - name: Run orainstRoot script
      ansible.builtin.shell: |
        set -eo pipefail
        PATH=$PATH:/usr/local/bin
        main() {
          echo {{ oracle_inventory }}/orainstRoot.sh
          {{ oracle_inventory }}/orainstRoot.sh
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-db

    - name: Run root script
      ansible.builtin.shell: |
        set -eo pipefail
        PATH=$PATH:/usr/local/bin
        main() {
          echo {{ grid_home }}/root.sh
          {{ grid_home }}/root.sh
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-db

    - name: Run configuration script
      ansible.builtin.shell: |
        set -eo pipefail
        PATH=$PATH:/usr/local/bin
        main() {
          echo {{ grid_home }}/gridSetup.sh -executeConfigTools -responseFile {{ stage }}/{{ grid_response_file }} -silent
          {{ grid_home }}/gridSetup.sh -executeConfigTools -responseFile {{ stage }}/{{ grid_response_file }} -silent
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-db
      become: true
      become_user: "{{ oracle_install_user }}"

  # block
  when: not grid_software_installed.stat.exists
