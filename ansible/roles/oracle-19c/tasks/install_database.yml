---
- name: Check oracle 19c DB software installed
  ansible.builtin.stat:
    path: "{{ database_home }}/bin/sqlplus"
  register: db_software_installed

- name: Install Oracle 19c database software
  block:
    - name: Create directories
      ansible.builtin.file:
        path: "{{ item }}"
        owner: "{{ oracle_install_user }}"
        group: "{{ oracle_install_group }}"
        state: directory
        recurse: yes
      loop:
        - "{{ stage }}/psu"
        - "{{ database_home }}"

    - name: Create response file
      template:
        src: "{{ item }}.j2"
        dest: "{{ stage }}/{{ item }}"
        owner: "{{ oracle_install_user }}"
        group: "{{ oracle_install_group }}"
        mode: "0700"
      loop:
        - "{{ database_response_file }}"
        - "{{ database_install_script }}"

    - name: Unzip Oracle 19c Database Infrastructure software # Shell command added as unarchive doesn't support async
      become: true
      become_user: "{{ oracle_install_user }}"
      ansible.builtin.shell: unzip "{{ stage }}/{{ db_software }}" -d "{{ database_home }}"
      async: 1800
      poll: 60

    - name: Unzip database psu patch software
      ansible.builtin.unarchive:
        src: "{{ stage }}/{{ psu_patch }}"
        dest: "{{ stage }}/psu"
        owner: "{{ oracle_install_user }}"
        group: "{{ oracle_install_group }}"
        remote_src: yes

    - name: Unzip OPatch on database home
      ansible.builtin.unarchive:
        src: "{{ stage }}/{{ opatch }}"
        dest: "{{ database_home }}"
        owner: "{{ oracle_install_user }}"
        group: "{{ oracle_install_group }}"
        remote_src: yes

    - name: Install Oracle 19c db software and apply patches
      become: true
      become_user: "{{ oracle_install_user }}"
      ansible.builtin.shell: |
        main() {
          echo {{ stage }}/{{ database_install_script }}
          {{ stage }}/{{ database_install_script }}
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-db
      register: db_install_output
      async: 1800
      poll: 30
      vars:
        ansible_remote_tmp: /tmp/.ansible
        ansible_async_dir: /tmp/.ansible_async

    - name: Run post install root script
      ansible.builtin.shell: |
        main() {
          echo {{ database_home }}/root.sh
          {{ database_home }}/root.sh
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-db

    - name: Update run_user for the {{ oracle_externaljob_file }}
      replace:
        path: "{{ oracle_externaljob_rdbms_path }}/{{ oracle_externaljob_file }}"
        regexp: "run_user = nobody"
        replace: "run_user = {{ oracle_install_user }}"

    - name: Update run_group for the {{ oracle_externaljob_file }}
      replace:
        path: "{{ oracle_externaljob_rdbms_path }}/{{ oracle_externaljob_file }}"
        regexp: "run_group = nobody"
        replace: "run_group = dba"

  # block
  when: not db_software_installed.stat.exists
