---
- name: Set SSM parameters path fact from ec2 ssm-parameters-prefix and Name tag
  set_fact:
    ssm_parameters_path: '/{{ ssm_parameters_prefix }}/{{ ec2.tags["Name"] }}'
  when: ssm_parameters_path is not defined

- name: Set SSM parameters database path facts
  set_fact:
    ssm_parameters_path_db_sys_password: "{{ ssm_parameters_path }}/{{ primary_database }}/syspassword"

- name: Get SSM parameters
  set_fact:
    database_sys_password: "{{ lookup('aws_ssm', ssm_parameters_path_db_sys_password, region=ansible_ec2_placement_region) }}"

- name: Setup Primary database for HA
  block:
    - name: Copy setup files for execution
      template:
        src: "{{ item }}.j2"
        dest: "{{ stage }}/{{ item }}"
        owner: "{{ oracle_install_user }}"
        group: "{{ oracle_install_group }}"
        mode: "0700"
      loop:
        - "add_tns_entry.sh"
        - "add_lsnr_static_services.sh"
        - "setup_primary_for_ha.sh"

    - name: Check database password file exists
      stat:
        path: "{{ database_home }}/dbs/orapw{{ primary_database }}"
      register: password_file

    - name: Create password file if it does not exists
      ansible.builtin.shell: |
        source oraenv <<< {{ primary_database }}
        orapwd file="{{ database_home }}/dbs/orapw{{ primary_database }}" password={{ database_sys_password }} entries=10
      when: not password_file.stat.exists

    - name: Setup Primary Database for new standby
      shell: "{{ stage }}/setup_primary_for_ha.sh -t {{ primary_uniq_name }} -s {{ standby_uniq_name }}"
      become: true
      become_user: "{{ oracle_install_user }}"
      register: param_result
      failed_when: param_result.rc != 0

    - name: Setup Listener service
      shell: "{{ stage }}/add_lsnr_static_services.sh {{ global_database_name }} {{ primary_database }} {{ database_home }}"
      become: true
      become_user: "{{ oracle_install_user }}"
      register: param_result
      failed_when: param_result.rc != 0

    - name: Add TNS entry for primary
      shell: "{{ stage }}/add_tns_entry.sh {{ database_home }} {{ primary_database }} {{ primary_host }} {{ db_port }} {{ primary_uniq_name }}"
      register: param_result
      failed_when: param_result.rc != 0

    - name: Add TNS entry for standby
      shell: "{{ stage }}/add_tns_entry.sh {{ database_home }} {{ standby_database }} {{ standby_host }} {{ db_port }} {{ standby_uniq_name }}"
      become: true
      become_user: "{{ oracle_install_user }}"
      register: param_result
      failed_when: param_result.rc != 0

    - name: Copy password file to S3 bucket
      ansible.builtin.shell: |
        source oraenv <<< {{ db_name }}
        aws s3 cp $ORACLE_HOME/dbs/orapw{{ db_name }} s3://{{ ansible_aws_ssm_bucket_name }}/

  become: true
  become_user: "{{ oracle_install_user }}"
  environment: "{{ db_env }}"
