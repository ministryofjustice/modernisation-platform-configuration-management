#
#  We apply OEM job property files to create these jobs.
#
- name: Check if inside AWS.
  uri:
    url: http://169.254.169.254/latest/meta-data
    timeout: 20
  register: aws_uri_check
  failed_when: false

- set_fact:
    is_aws_environment: "{{ aws_uri_check.status == 200 }}"

- name: Get Job Property Files
  ansible.builtin.find:
    paths: "{{ role_path }}/templates/jobs/{{ application_name }}"
    recurse: true
    depth: 1
    file_type: file
  delegate_to: localhost
  become: "{{ omit if (is_aws_environment | default(true)) else false }}"
  register: get_oem_job_property_files
  loop: "{{ application_groups.keys() | list + ['common'] }}"
  loop_control:
    loop_var: application_name

- debug:
    var: get_oem_job_property_files

- name: Populate List of Jobs
  set_fact:
    oem_job_property_files: "{{ get_oem_job_property_files.results | map(attribute='files') | flatten | map(attribute='path') | list }}"

- debug:
    var: oem_job_property_files

- block:
    - name: Flatten Application Groups Dictionary
      set_fact:
        application_groups_flatten: |
          {% for application_group in application_groups -%}
          {{ application_group }}:{% for application in application_groups[application_group] -%}{{ application }}{%if not loop.last %},{% else %}|{% endif %}
          {%- endfor %}
          {%- endfor %}

    - name: Template OEM Job Property Files
      ansible.builtin.template:
        src: "{{ oem_job }}"
        dest: "{{ stage }}/{{ oem_job | basename | regex_replace('(.*)\\.j2$','\\1.txt')}}"
        mode: "0600"
        owner: oracle
        group: oinstall
      loop: "{{ oem_job_property_files }}"
      loop_control:
        loop_var: oem_job
      vars:
        oem_hostname: "{{ ansible_hostname }}"
        job_name: "{{ oem_job | basename | splitext | first }}"

    - name: emcli Login
      import_tasks: emcli_login.yml

    # We replace all templated jobs in case the definitions have changed
    # Any jobs that have been scheduled need to be stopped before they are deleted
    - name: Get All Scheduled Jobs to be Stopped for Replacement
      become_user: oracle
      ansible.builtin.shell: |
        {{ emcli }} get_jobs  -format=name:csv | awk -F, '{if($1==toupper("{{ oem_job | basename | splitext | first }}") && $8=="Scheduled"){print $3}}'
      register: get_scheduled_job_ids
      loop: "{{ oem_job_property_files }}"
      loop_control:
        loop_var: oem_job 
      changed_when: false

    - name: Create List of Scheduled Job IDs
      set_fact:
         scheduled_job_ids: "{{ get_scheduled_job_ids.results | map(attribute='stdout') | join(';') }}"

    - name: Stop Scheduled Jobs Prior to Replacement
      become_user: oracle
      ansible.builtin.shell: |
        {{ emcli }} stop_job -job_id="{{ scheduled_job_ids }}"
      when: scheduled_job_ids != ""

    # Now delete all of the jobs that we are about to replace
    - name: Get All Jobs to be Replaced
      become_user: oracle
      ansible.builtin.shell: |
        {{ emcli }} get_jobs  -format=name:csv | awk -F, '{if($1==toupper("{{ oem_job | basename | splitext | first }}")){print $3}}'
      register: get_job_ids
      loop: "{{ oem_job_property_files }}"
      loop_control:
        loop_var: oem_job 
      changed_when: false

    - name: Create List of Job IDs
      set_fact:
         job_ids: "{{ get_job_ids.results | map(attribute='stdout') | join(';') }}"

    - name: Delete Jobs Prior to Replacement
      become_user: oracle
      ansible.builtin.shell: |
        {{ emcli }} delete_job -job_id="{{ job_ids }}"
      when: job_ids != ""

    - name: Create Jobs from OEM Property Files
      become_user: oracle
      ansible.builtin.shell: |
        {{ emcli }} create_job -input_file=property_file:"{{ property_file }}"
      register: create_jobs
      loop: "{{ oem_job_property_files }}"
      loop_control:
        loop_var: oem_job
      vars:
        property_file: "{{ stage }}/{{ oem_job | basename | regex_replace('(.*)\\.j2$','\\1.txt') }}"
      changed_when: create_jobs.stdout is search('.*Creation of job.*was successful.*')
      failed_when:
        - not create_jobs.stdout is search('.*Creation of job.*was successful.*')
        - not create_jobs.stderr is search('.*A job matching.*already exists.*')

    - debug:
         var: create_jobs

  always:
    - name: Remove EMCLI Login Script
      file:
        path: "{{ stage }}/{{ file_name }}"
        state: absent
      loop:
        - get_metric_extensions_versions.sql
      loop_control:
        loop_var: file_name
