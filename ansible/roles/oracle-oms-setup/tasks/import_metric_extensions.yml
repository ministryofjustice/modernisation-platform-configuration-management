#
#  We import the Metric Extensions provided in the files directory of this role into
#  each OEM Instance.   This does not deploy them to any targets or schedule them.
#  It simply makes them available for subsequent deployment or scheduling.
#
#  Metric Extensions are found in the files/metric_extensions subdirectory with
#  further subdirectories for Metric Extensions which are specific to a particular
#  application (such as Delius) or common Metric Extensions which are more
#  generic and may be applicable to multiple or all applications.
#

- name: Check if inside AWS.
  uri:
    url: http://169.254.169.254/latest/meta-data
    timeout: 20
  register: aws_uri_check
  failed_when: false

- set_fact:
    is_aws_environment: "{{ aws_uri_check.status == 200 }}"

- name: Get Metric Extensions
  ansible.builtin.find:
    paths: "{{ role_path }}/files/metric_extensions/{{ application_name }}"
    recurse: true
    depth: 1
    file_type: directory
  delegate_to: localhost
  become: "{{ is_aws_environment | default(true) }}"
  register: get_metric_extensions
  loop: "{{ application_groups.keys() | list + ['common'] }}"
  loop_control:
    loop_var: application_name

- debug:
    var: get_metric_extensions

- name: Populate List of Metric Extensions
  set_fact:
    metric_extensions: "{{ get_metric_extensions.results | map(attribute='files') | flatten | map(attribute='path') | list }}"

- debug:
    var: metric_extensions

- block:
    - name: Copy EMCLI Login Script
      ansible.builtin.template:
        src: emcli_login.sh.j2
        dest: "{{ stage }}/emcli_login.sh"
        mode: "0700"
        owner: oracle
        group: oinstall

    - name: Import Extensions
      include_tasks: import_metric_extension.yml
      vars:
        metric_extension_path: "{{ metric_extension }}"
        metric_extension_name: "{{ metric_extension.split('/')[-1] }}"
      loop: "{{ metric_extensions }}"
      loop_control:
        loop_var: metric_extension
      tags: import_metric_extension

    - name: Copy Metric Extensions Versions Script
      ansible.builtin.copy:
        src: metric_extensions_versions.sql
        dest: "{{ stage }}/metric_extensions_versions.sql"
        mode: "0600"
        owner: oracle
        group: oinstall

    - name: Run SQL to Get Versions of Metrics Extensions
      become_user: oracle
      ansible.builtin.shell: |
        echo "running emcli_login.sh"
        . {{ stage }}/emcli_login.sh
        {{ emcli }} execute_sql -sql="FILE" -input_file="FILE:{{ stage }}/metric_extensions_versions.sql" -targets="EMREP:oracle_database"
      register: get_metric_extensions_versions
      changed_when: false

    - name: Get Versions
      debug:
        var: get_metric_extensions_versions

    - name: Initialize Dictionary of Metric Extension Versions
      set_fact:
        metric_extensions_versions: {}

    - name: Create Dictionary of Metric Extension Versions
      set_fact:
        metric_extensions_versions: "{{ metric_extensions_versions | combine({extension.split('|')[0]: extension.split('|')[1] }) }}"
      loop: "{{ get_metric_extensions_versions.stdout_lines | select('match','^EXTENSION=') | list | map('regex_replace','^EXTENSION=','') | list }}"
      loop_control:
        loop_var: extension

    - name: Show Versions
      debug:
        var: metric_extensions_versions

    # All Metric Extensions are Designed for the Host Target
    # Note from EM 13c Licensing Doc: https://docs.oracle.com/cd/E63000_01/OEMLI/base_functionality.htm
    # Create new metrics to monitor conditions specific to customer environments.
    # Note: Metric Extensions are available free of charge only for the host target and not for other targets.
    - name: Save Latest Versions of Metric Extensions as Deployable Draft
      shell: |
        echo "running emcli_login.sh"
        . {{ stage }}/emcli_login.sh
        {{ emcli }} save_metric_extension_draft -target_type="host" -name="{{ extension | regex_replace('\$','\\$') }}" -version="{{ metric_extensions_versions[extension] }}"
      loop: "{{ metric_extensions_versions.keys() }}"
      loop_control:
        loop_var: extension
      register: save_as_draft
      failed_when:
        - save_as_draft.stderr != ''
        - not save_as_draft.stderr is search('.*Only metric extensions in editable status can be saved as a deployable draft.*')
      changed_when:
        - save_as_draft.stderr == ''

    - pause:
        seconds: 30
        prompt: |
          ====================================================================================
            
            Metric Extensions have now been imported into OEM.
            
            However, as of OEM 13.5 Oracle does not provide an API to Deploy or Undeploy 
            Metric Extensions.

            Reference on MOS:  
            EM13c : EMCLI Verb To Control Metric Extension Deploy / Undeploy Operations 
            (Doc ID 2696982.1)

            This step must therefore be done manually through the Console as follows:

              Enterprise --> Monitoring --> Metric Extensions

              Select the Metric Extension to deploy and Actions --> Deploy to Targets..
          ====================================================================================

  always:
    - name: Remove EMCLI Login Script
      file:
        path: "{{ stage }}/{{ file_name }}"
        state: absent
      loop:
        - emcli_login.sh
        - get_metric_extensions_versions.sql
      loop_control:
        loop_var: file_name
