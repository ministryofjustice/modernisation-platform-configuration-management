---
# Check if the patch is already applied
- name: Verify OMS Holistic patch is not applied
  include_tasks: check_oms_patch_applied.yml
  vars:
    patch_number: "{{ oms_holistic_patch_number }}"

- name: Debug patch_applied value
  debug:
    var: patch_applied

- name: Install OMS Holistic Patch
  block:
    - name: Check status of OMS
      ansible.builtin.shell: |
        {{ emctl_oms }} status oms | grep -c "^Oracle Management Server is Up" | cat
      changed_when: false
      register: oms_running

    - name: Stop OMS
      ansible.builtin.shell: |
        set -eo pipefail
        main() {
          {{ emctl_oms }} stop oms -all -force
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-oem
      async: 86400
      poll: 60
      when: oms_running.stdout == '1'

    - name: Start OMS Admin Console Only for OMS RU Patch
      ansible.builtin.shell: |
        set -eo pipefail
        main() {
          {{ emctl_oms }} start oms -admin_only
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-oem
      async: 86400
      poll: 60

    # Will likely need to deinstall the previous Holistic patch before applying the new one
    # and that functionality is not yet implemented
    - name: Apply Holistic OMS Patch
      ansible.builtin.shell: |
        set -eo pipefail
        main() {
          export ORACLE_HOME={{ oms_middleware_home }}
          export PATH=${ORACLE_HOME}/bin:${ORACLE_HOME}/OMSPatcher:${PATH}
          cd {{ omspatcher_stage }}/{{ oms_holistic_patch_number }}
          omspatcher apply {{ omspatcher_stage }}/{{ oms_holistic_patch_number }} -spb_patch -property_file {{ omspatcher_stage }}/oms_property_file -silent
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-oem
      async: 86400
      poll: 60

  # block
  when: patch_applied == '0'
  become: true
  become_user: oracle
  environment: "{{ oms_env }}"
