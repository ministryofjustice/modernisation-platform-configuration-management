---
- name: Install OMS RU Patch
  block:
    - name: Check status of OMS
      ansible.builtin.shell: |
        {{ emctl_oms }} status oms | grep -c "^Oracle Management Server is Up" | cat
      changed_when: false
      register: oms_running

    - name: Stop OMS
      ansible.builtin.shell: |
        set -eo pipefail
        main() {
          {{ emctl_oms }} stop oms -all -force
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-oem
      async: 86400
      poll: 60
      when: oms_running.stdout == '1'

    - name: Apply Pre-req OMS Patches
      include_tasks: apply_supplemental_patches.yml
      vars:
        ru_phase: "pre"
      when: required_patches is defined and required_patches | length > 0

    - name: Start OMS Admin Console Only for OMS RU Patch
      ansible.builtin.shell: |
        set -eo pipefail
        main() {
          {{ emctl_oms }} start oms -admin_only
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-oem
      async: 86400
      poll: 60

    - name: Apply OMS Patches
      ansible.builtin.shell: |
        set -eo pipefail
        main() {
          cd {{ omspatcher_stage }}/{{ oms_ru_patch_number }}
          ${ORACLE_HOME}/OMSPatcher/omspatcher apply -silent -property_file {{ omspatcher_stage }}/oms_property_file
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-oem
      async: 86400
      poll: 60

    - name: Apply Post-RU OMS Patches
      include_tasks: apply_supplemental_patches.yml
      vars:
        ru_phase: "post"
      when: required_patches is defined and required_patches | length > 0

    - name: Check status of OMS
      ansible.builtin.shell: |
        {{ emctl_oms }} status oms | grep -c "^Oracle Management Server is Up" | cat
      changed_when: false
      register: oms_running

    #  if running
    - name: Stop OMS Excluding Admin Console
      ansible.builtin.shell: |
        set -eo pipefail
        main() {
          {{ emctl_oms }} stop oms -all -force
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-oem
      async: 86400
      poll: 60
      when: oms_running.stdout == '1'

    #  if not running
    - name: Start OMS Admin Console Only for OMS Holistic Patch
      ansible.builtin.shell: |
        set -eo pipefail
        main() {
          {{ emctl_oms }} start oms -admin_only
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-oem
      async: 86400
      poll: 60
      when: oms_running.stdout == '0'

    # Will likely need to deinstall the previous Holistic patch before applying the new one
    # and that functionality is not yet implemented
    - name: Apply Holistic OMS Patch
      ansible.builtin.shell: |
        set -eo pipefail
        main() {
          export ORACLE_HOME={{ oms_middleware_home }}
          export PATH=${ORACLE_HOME}/bin:${ORACLE_HOME}/OMSPatcher:${PATH}
          cd {{ omspatcher_stage }}/{{ oms_holistic_patch_number }}
          omspatcher apply {{ omspatcher_stage }}/{{ oms_holistic_patch_number }} -spb_patch -property_file {{ omspatcher_stage }}/oms_property_file -silent
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-oem
      async: 86400
      poll: 60

    - name: Remove OMSPatcher Property File
      file:
        path: "{{ omspatcher_stage }}/oms_property_file"
        state: absent

    - name: Check status of OMS
      ansible.builtin.shell: |
        {{ emctl_oms }} status oms | grep -c "^Oracle Management Server is Up" | cat
      changed_when: false
      register: oms_running

    - name: Re-Start OMS After Patching
      ansible.builtin.shell: |
        set -eo pipefail
        main() {
          {{ emctl_oms }} start oms
        }
        main 2>&1 | logger -p local3.info -t ansible-oracle-oem
      async: 86400
      poll: 60
      when: oms_running.stdout == '0'

  # block
  become: true
  become_user: oracle
  environment: "{{ oms_env }}"
