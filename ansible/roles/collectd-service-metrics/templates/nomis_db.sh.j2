#!/usr/bin/env bash

if [[ "$(whoami)" != "oracle" ]]
then
    echo "This script is expected to be run as the Oracle user" 1>&2
    exit 1
fi 

# We need to make sure this is in the path    
export PATH=${PATH}:/usr/local/bin

# Templated in from ansible
HOSTNAME="${HOSTNAME:-localhost}"
INTERVAL="{{ collectd_script_interval }}"
ORACLE_SID_LIST=`grep db_1 /etc/oratab|grep -v "^#"| awk -F: '{ print $1 }'`
ORACLE_BATCH_ERROR_FILE="{{ oracle_batch_error_file }}"
ORACLE_BATCH_STATUSES="{{ oracle_batch_statuses }}"

db_connected() {
    # DB resources names are usually 'ora.${DB}.db' but some have a suffix after ${DB}
    DB="$(crsctl status resource | grep -m1 -i ora\.${SID}.*\.db | cut -f2 -d=)"

    # Check added to alert on not having a database resource BEFORE trying to get it's status
    if [[ -z "$DB" ]]
    then
        echo "Failed to find a database resource for ${SID}" 1>&2
        return 1
    fi

    # Worth noting here that crsctl exits with code 0 even if you try and find details of a database that doesn't exist
    STATUS="$(crsctl status resource ${DB} -v | grep STATE_DETAILS | cut -f2 -d= | cut -f1 -d,)"

    case ${STATUS} in
        "Open")
            return 0
            ;;
        "Open,Readonly")
            return 0
            ;;
        "Mounted (Closed)")
            return 0
            ;;
        *)
            # If this check returns a non-zero value then the database is not connected
            return 1
            ;;
    esac
}

batch_status() {

    local LINE="$1"
    local ORACLE_BATCH_ERROR_FILE="$2"
    
    # Check if the file contains any of the batch statuses we're looking for
    if [[ "$(cat $ORACLE_BATCH_ERROR_FILE | grep $LINE)" ]]
    then
        val="$(cat $ORACLE_BATCH_ERROR_FILE | grep "$LINE" | cut -f2 -d' ')"
        return "$val"
    else
        # if the line is not there then return a different value to be posted to a different metric
        return 2
    fi
}

while sleep "$INTERVAL"
do
    for SID in ${ORACLE_SID_LIST}
    do            
        ORACLE_SID="+ASM"
        ORAENV_ASK="NO"
        . oraenv > /dev/null
        db_connected
        returnval=$?
        echo "PUTVAL $HOSTNAME/exec-db_connected/bool-$SID interval=$INTERVAL N:$returnval"
    done

    if [[ -s "${ORACLE_BATCH_ERROR_FILE}" ]]
    then
        echo "PUTVAL $HOSTNAME/exec-oracle_batch_monitoring_file_missing/bool interval=$INTERVAL N:0"
        for text in $ORACLE_BATCH_STATUSES
        do
            batch_status "$text" "$ORACLE_BATCH_ERROR_FILE"
            status=$?
            if [[ $status == 0 ]] || [[ $status == 1 ]]
            then
                echo "PUTVAL $HOSTNAME/exec-$text/bool interval=$INTERVAL N:$status"
            else
                echo "PUTVAL $HOSTNAME/exec-${text}_value_missing/bool interval=$INTERVAL N:1"
            fi
        done
    else
        echo "PUTVAL $HOSTNAME/exec-oracle_batch_monitoring_file_missing/bool interval=$INTERVAL N:1"
    fi

done
