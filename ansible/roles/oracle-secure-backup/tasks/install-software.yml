# -----------------------------------------------------------------------------
# This Ansible task file installs and configures Oracle Secure Backup Web Service (OSBWS)
# for Oracle databases. It performs the following key steps:
#
# 1. Validates that required variables are defined, failing early if not.
# 2. Determines the Oracle Home directory, either from a provided variable or by parsing /etc/oratab.
# 3. Prepares necessary installation files (argument file and install script) using templates.
# 4. Checks for the presence and freshness of the OSBWS library file, comparing it to the Oracle server library.
# 5. Runs the OSBWS installation script if needed (e.g., files changed, library missing or outdated).
# 6. Handles installation failures by attempting to extract the OSBWS library from a bundled zip file,
#    and retries the installation.
# 7. Updates OSBWS configuration files with the correct S3 bucket and chunk size.
# 8. Optionally runs a backup test (sbttest) to verify installation.
# 9. Checks AWS S3 permissions required for backup and restore operations.
# -----------------------------------------------------------------------------
---

- name: Fail if variables not defined
  fail:
    msg: "Please run get-ec2-facts role to collect facts, and ensure osbws_config.s3_bucket_name is defined"
  when: ansible_ec2_iam_instance_profile_role is not defined or osbws_config.s3_bucket_name is not defined

- name: Get Oracle Home if not defined
  when: database_home is not defined
  block:
    - name: Get Oracle Home from /etc/oratab (first DB home)
      shell: |
        awk -F: '!/^#/ && $2 ~ /oracle/ { print $2; exit }' /etc/oratab
      register: oracle_home_result
      changed_when: false
    
    - name: Define Oracle Home
      set_fact:
        database_home: "{{ oracle_home_result.stdout | trim }}"

    - name: Fail if Oracle Home not defined
      fail:
        msg: "Failed to get Oracle Home"
      when: (database_home | trim | length) == 0
      
- name: Define libDir_cmd to try external library download
  set_fact:
    libDir_cmd: "-libDir {{ database_home }}/lib"

- name: Configure osbws_argfile
  ansible.builtin.template:
    src: osbws_argfile
    dest: "{{ osw_stage_dir }}/{{ osbws_config.name }}_argfile"
    mode: 0644
    owner: oracle
    group: oinstall
  register: osbws_argfile

- name: Copy install script
  ansible.builtin.template:
    src: install.sh
    dest: "{{ osw_stage_dir }}/{{ osbws_config.name }}_install.sh"
    mode: 0755
    owner: oracle
    group: oinstall
  register: osbws_install_script

- name: Get Stats of Library File Created when Oracle Home was Installed
  stat:
    path: "{{ database_home }}/lib/libserver19.a"
  register: server_lib_file

- name: Get Stats of Library File Created when OSBWS was Installed
  stat:
    path: "{{ database_home }}/lib/libosbws.so"
  register: osbws_lib_file

# Run the installation script for any of these conditions:
# 1. The ARGFILE has been changed
# 2. The Install Script has been changed
# 3. The OSBWS Library file does not exist (probably due to previous install failure)
# 4. The OSBWS Library file predates the Oracle Server Library file (probably due to previous install failure)
- name: Run install script
  become: true
  become_user: oracle
  shell: |
    {{ osw_stage_dir }}/{{ osbws_config.name }}_install.sh
  register: osbws_install_result
  when: osbws_argfile.changed
    or osbws_install_script.changed
    or (not osbws_lib_file.stat.exists)
    or (osbws_lib_file.stat.exists and (osbws_lib_file.stat.mtime < server_lib_file.stat.mtime))

- name: Handle failed install
  when: osbws_install_result.stderr | length > 0
  block:
    - name: Print osbws_install_result.stderr
      debug:
        var: osbws_install_result.stderr

    - name: Check for {{ database_home }}/lib/osbws_linux64.zip
      stat:
        path: "{{ database_home }}/lib/osbws_linux64.zip"
      register: osbws_lib_zip

    # Starting with Oracle Database 19c Release Update version 27 (19.27), the backup module library files
    # are available in the Oracle home directory after you install the Oracle Database.
    - name: Fail if osbws_linux64.zip not found
      fail:
        msg: "Failed to find osbws_linux64.zip"
      when: not osbws_lib_zip.stat.exists
      
    - name: Unzip OSBWS Library bundled with software
      unarchive:
        src: "{{ database_home }}/lib/osbws_linux64.zip"
        dest: "{{ database_home }}/lib"
        remote_src: true
      when: osbws_lib_zip.stat.exists

    - name: Remove libDir_cmd to avoid external library download
      set_fact:
        libDir_cmd: ""

    - name: Configure osbws_argfile
      ansible.builtin.template:
        src: osbws_argfile
        dest: "{{ osw_stage_dir }}/{{ osbws_config.name }}_argfile"
        mode: 0644
        owner: oracle
        group: oinstall
      register: osbws_argfile

    - name: Run install script
      become: true
      become_user: oracle
      shell: |
        {{ osw_stage_dir }}/{{ osbws_config.name }}_install.sh
      register: osbws_install_result

    - name: Handle failed install
      fail:
        msg: "Failed to install OSBWS: {{ osbws_install_result.stderr }}"
      when: osbws_install_result.stderr | length > 0

- name: Update osbws config
  become: true
  become_user: oracle
  ansible.builtin.lineinfile:
    path: "{{ database_home }}/dbs/{{ osbws_config.name }}.ora"
    regexp: "^OSB_WS_BUCKET="
    line: "OSB_WS_BUCKET={{ osbws_config.s3_bucket_name }}"
    create: yes

- name: Set OSB_WS_CHUNK_SIZE
  become: true
  become_user: oracle
  ansible.builtin.lineinfile:
    path: "{{ database_home }}/dbs/osbws.ora"
    regexp: "^OSB_WS_CHUNK_SIZE="
    line: "OSB_WS_CHUNK_SIZE={{ oracle_osbws_chunk_size }}"
  when: oracle_osbws_chunk_size is defined

# For backing up, ensure bucket s3:GetObject s3:GetBucketLocation s3:PutOject
- name: Run sbttest
  become: true
  become_user: oracle
  ansible.builtin.shell: |
    export OSB_WS_PFILE={{ database_home }}/dbs/{{ osbws_config.name }}.ora
    {{ database_home }}/bin/sbttest /tmp/foo -libname {{ database_home }}/lib/libosbws.so
  check_mode: false
  changed_when: false
  when: osbws_config.run_sbttest is defined and osbws_config.run_sbttest

# For restore, ensure bucket allows s3:GetBucketLocation and s3:GetObject
- name: Check GetBucketLocation permission
  ansible.builtin.shell: |
    PATH=$PATH:/usr/local/bin
    aws s3api get-bucket-location --bucket {{ osbws_config.s3_bucket_name }}
  check_mode: false
  changed_when: false

- name: Check GetObject permission
  ansible.builtin.shell: |
    PATH=$PATH:/usr/local/bin
    file=$(aws s3api get-object --bucket {{ osbws_config.s3_bucket_name }} --key deliberate-missing-key /dev/null 2>&1 | grep "NoSuchKey")
  check_mode: false
  changed_when: false
