#!/bin/bash
#
# weblogic-server        Startup script for server.
#
# chkconfig: - 75 14
# description: weblogic server

# Source function library.
. /etc/init.d/functions

prog=weblogic-server

start_process() {
  if [[ $(whoami) == "root" ]]; then
    nohup su - oracle -c /u01/app/oracle/Middleware/user_projects/domains/NomisDomain/bin/startWebLogic.sh 2>&1 | logger -p local3.info -t "$prog" &
  else
    echo -n "must be run as root"
    return 1
  fi
}

wait_start_process() {
  timeout 290 /home/oracle/admin/scripts/wait_for_entry_in_log.sh /var/log/messages "Server started in RUNNING mode" "$prog:"
}

stop_process() {
  if [[ $(whoami) == "root" ]]; then
    nohup su - oracle -c /u01/app/oracle/Middleware/user_projects/domains/NomisDomain/bin/stopWebLogic.sh 2>&1 | logger -p local3.info -t "$prog" &
  else
    echo -n "must be run as root"
    return 1
  fi
}

wait_stop_process() {
  timeout 15 /home/oracle/admin/scripts/wait_for_entry_in_log.sh /var/log/messages "Done" "$prog:"
}

get_process_pids() {
  process_pids1=$(pgrep -u oracle -f "startWebLogic.sh$" 2> /dev/null)
  process_pids2=$(pgrep -u oracle -f "weblogic.Name=AdminServer" 2> /dev/null)
  [[ -z $process_pids1 && -z $process_pids2 ]] && return 1
  (
    for process_pid in $process_pids1 $process_pids2; do
      pstree -ap "$process_pid" | grep -v '{' | cut -d, -f2 | cut -d\  -f1
    done
  ) | sort -u | tr '\n' ' '
}

start() {
  echo -n $"Starting $prog: "
  if PIDS=$(get_process_pids); then
    echo -n "Already running"
    echo_success
    echo
    return 0
  fi
  echo "init.d starting $prog" | logger -p local3.info -t "$prog"
  if ! start_process; then
    echo "init.d failed starting $prog" | logger -p local3.info -t "$prog"
    echo_failure
    echo
    return 1
  fi
  if ! wait_start_process; then
    echo "init.d failed waiting for $prog" | logger -p local3.info -t "$prog"
  fi
  if ! get_process_pids > /dev/null; then
    echo "init.d failed getting process pids for $prog" | logger -p local3.info -t "$prog"
    echo_failure
    echo
    return 1
  fi
  echo "init.d started $prog" | logger -p local3.info -t "$prog"
  echo_success
  echo
}

stop() {
  echo -n $"Shutting down $prog: "
  if ! PIDS=$(get_process_pids); then
    echo -n "Already stopped"
    echo_success
    echo
    return 0
  fi
  echo "init.d stopping $prog" | logger -p local3.info -t "$prog"
  stop_process
  if ! wait_stop_process; then
    echo "init.d failed waiting to stop $prog" | logger -p local3.info -t "$prog"
  fi
  if ! PIDS=$(get_process_pids); then
    echo_success
    echo
    return 0
  fi
  echo "init.d killing $prog $PIDS" | logger -p local3.info -t "$prog"
  kill $PIDS
  sleep 2
  if ! get_process_pids > /dev/null; then
    echo_success
    echo
    return 0
  fi
  sleep 5
  if ! PIDS=$(get_process_pids); then
    echo_success
    echo
    return 0
  fi
  echo "init.d killing with -9 $prog $PIDS" | logger -p local3.info -t "$prog"
  kill -9 $PIDS
  sleep 2
  if ! get_process_pids > /dev/null; then
    echo_success
    echo
    return 0
  fi
  echo_failure
  echo
  return 1
}

status() {
  echo -n $"Status of $prog: "
  if ! PIDS=$(get_process_pids); then
    echo -n "process not found"
    echo_failure
    echo
    return 1
  fi
  echo -n $PIDS
  echo_success
  echo

  if [[ -x /home/oracle/admin/scripts/ms_state.sh ]]; then
    if [[ $(whoami) == "root" ]]; then
      su - oracle -c "/home/oracle/admin/scripts/ms_state.sh"
    elif [[ $(whoami) == "oracle" ]]; then
      /home/oracle/admin/scripts/ms_state.sh
    fi
  fi
}

restart() {
  stop
  start
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  status)
    status
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 3
esac

exit $?
