#!/bin/bash
#
# opmn        Start and stop Oracle Process Managed Node services
#
# chkconfig: - 77 12
# description: Oracle Process Managed Node services

# Source function library.
. /etc/init.d/functions

prog=opmn

start_process() {
  if [[ $(whoami) == "root" ]]; then
    su - oracle -c "opmnctl startall" | logger -p local3.info -t $prog
  else
    echo -n "must be run as root"
    return 1
  fi
}

stop_process() {
  if [[ $(whoami) == "root" ]]; then
    su - oracle -c "opmnctl stopall" | logger -p local3.info -t $prog
  else
    echo -n "must be run as root"
    return 1
  fi
}

status_process() {
  if [[ $(whoami) == "root" ]]; then
    su - oracle -c "opmnctl status"
  else
    echo "must be run as root"
    return 1
  fi
}

get_process_pids() {
  ! process_pids=$(pgrep -u oracle -f "opmn" 2> /dev/null) && return 1
  (
    for process_pid in $process_pids; do
      pstree -ap "$process_pid" | grep -v '{' | cut -d, -f2 | cut -d\  -f1
    done
  ) | sort -u | tr '\n' ' '
}

start() {
  echo -n $"Starting $prog: "
  if PIDS=$(get_process_pids); then
    echo -n "Already running $PIDS"
    echo_failure
    echo
    return 1
  fi
  echo "init.d starting $prog" | logger -p local3.info -t $prog
  if ! start_process; then
    echo_failure
    echo
    return 1
  fi
  if ! get_process_pids > /dev/null; then
    echo_failure
    echo
    return 1
  fi
  echo_success
  echo
}

stop() {
  echo -n $"Shutting down $prog: "
  if ! PIDS=$(get_process_pids); then
    echo -n "process not found"
    echo_failure
    echo
    return 1
  fi
  echo "init.d killing $prog $PIDS" | logger -p local3.info -t "$prog"
  if ! stop_process; then
    echo_failure
    echo
    return 1
  fi
  if get_process_pids > /dev/null; then
    echo_failure
    echo
    return 1
  fi
  echo_success
  echo
}

status() {
  echo -n $"Status of $prog: "
  status_process
  return $?
}

restart() {
  stop
  start
}

case "$1" in
  start)
    start
    ;;
  stop)
    stop
    ;;
  restart)
    restart
    ;;
  status)
    status
    ;;
  *)
    echo "Usage: $0 {start|stop|restart|status}"
    exit 3
esac

exit $?
