- name: (main/create-secrets) Set Secret Name And User List
  set_fact:
    secret_name: "{{ environment_name }}-oracle{% if 'delius-mis' in environment_name %}-{{ database_primary_sid[-3:] | lower }}{% endif %}-db-dba-passwords"
    users: [sys, system, dbsnmp, asmsnmp]

- name: (main/create-secrets) Setup Temporary Secrets Dictionary
  set_fact:
    secret_password_dict:
      account:
        secret: "{{ secret_name }}"

- name: (main/create-secrets) Check User Exists In Secret
  shell: aws secretsmanager get-secret-value --secret-id {{ secret_name }} --region {{ region }} --query SecretString --output text| jq -r .{{ item }}
  loop: "{{ users }}"
  register: secret_users

- name: (main/create-secrets) Add User Passwords Which Do Not Exist
  set_fact:
    add_users: |
      {{ add_users | default([]) + [{item.item: 'auto'} ] }}
  loop: "{{ secret_users.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.stdout == 'null'

- name: (main/create-secrets) Add User Passwords Which Do Exist
  set_fact:
    add_users: |
      {{ add_users | default([]) + [{item.item: None} ] }}
  loop: "{{ secret_users.results }}"
  loop_control:
    label: "{{ item.item }}"
  when: item.stdout != 'null'

- name: (main/create-secrets) Add Users To Secret Dictionary
  set_fact:
    secret_password_dict: "{{ secret_password_dict | combine({ 'account': { 'users': add_users }}, recursive=true) }}"

- name: (main/create-secrets) Get Secret Passwords
  import_role:
    name: secretsmanager-passwords
  vars:
    secretsmanager_passwords: "{{ secret_password_dict }}"

- name: (main/create-secrets) Set Secret Passwords
  set_fact:
    sys_password: "{{ secretsmanager_passwords_dict['account'].passwords['sys'] }}"
    system_password: "{{ secretsmanager_passwords_dict['account'].passwords['system'] }}"
    dbsnmp_password: "{{ secretsmanager_passwords_dict['account'].passwords['dbsnmp'] }}"
    asmsnmp_password: "{{ secretsmanager_passwords_dict['account'].passwords['asmsnmp'] }}"
