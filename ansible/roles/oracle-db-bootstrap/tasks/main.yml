---
# Skip a couple of bootstrap steps if not running in AWS (to allow for local testing)
- name: Check if inside AWS.
  uri:
    url: http://169.254.169.254/latest/meta-data
    timeout: 20
  register: aws_uri_check
  failed_when: false
  tags: always

- set_fact:
    is_aws_environment: "{{ aws_uri_check.status == 200 }}"
  tags: always

# We use the Oracle Inventory to get the Grid and Database Oracle Homes to avoid hardcoding these
- name: Find Oracle Inventory Location
  shell: |
    awk -F= '/inventory_loc/{print $2}' /etc/oraInst.loc
  register: get_ora_inventory
  changed_when: false
  tags: always

# Using the inventory we distinguish between Grid and Database Homes depending on whether the grep flag -v
# has been used to include or exclude the attribute 'CRS=true' respectively in the inventory XML file
#
# (We use basic Linux commands to parse the XML since the Ansible XML Module requires LXML library)
- name: Get Oracle Homes from Inventory
  shell: |
    grep {{ grep_exclude }} "CRS=\"true\"" {{ get_ora_inventory.stdout }}/ContentsXML/inventory.xml | \
    sed 's/\/>$//' | grep -v "REMOVED=\"T\"" | \
    awk '{for(i=1;i<=NF;i++){if($i~"IDX="){IDX=$i}}}{for(i=1;i<=NF;i++){if($i~"LOC="){LOC=$i}}}{print IDX,LOC}' | \
    sed 's/"//g' | tr -d 'IDX=' | tr -d 'LOC='  | sort -n -k1 | tail -1 | cut -d ' ' -f2
  register: get_oracle_homes
  loop: ["", "-v"]
  loop_control:
    loop_var: grep_exclude
  changed_when: false
  tags: always

- set_fact:
    oracle_database_oracle_home: "{{ ( get_oracle_homes.results | selectattr('grep_exclude','equalto','-v') | first ).stdout | trim }}"
    oracle_grid_oracle_home: "{{ ( get_oracle_homes.results | selectattr('grep_exclude','equalto','') | first ).stdout | trim }}"
  tags: always

- debug:
    msg: "Grid Home: {{ oracle_grid_oracle_home }};  Database Home {{ oracle_database_oracle_home }}"
  tags: always

- block:
    - name: (main) Find db version file
      find:
        path: "~/"
        patterns: ".db_version"
        hidden: yes
      register: find_db_version_file

    - block:
        - name: (main) Output db version file
          shell: cat ~/.db_version
          register: db_version_output

        - name: (main) Set fact for db version
          set_fact:
            db_version: "{{ db_version_output.stdout }}"
          when: db_version_output.stdout | length > 0
      when: find_db_version_file.matched == 1
  tags: always

- name: (main) Load in our vars for {{ db_version }} database and 19c grid
  include_vars:
    file: main{{ db_version | default() }}.yml
  when: db_version is defined
  tags: always

- name: (main) Get our instance facts
  ec2_metadata_facts:
  when: is_aws_environment|bool
  tags: always

- name: (main) Display database type
  debug:
    var: database_type
  tags: always

- name: (main) Gather installation facts
  include_tasks:
    file: check-installation.yml
    apply:
      tags: always
  tags: always

- name: (main) Reconfigure our config that was set during ami build
  include_tasks:
    file: reconfigure-instance.yml
    apply:
      tags: always
  tags: always

- name: (main) Setup required database passwords in Secrets Manager
  include_tasks:
    file: create-secrets.yml
    apply:
      tags: always
  tags: always

- name: (main) Reconfigure asm
  include_tasks:
    file: reconfigure-asm.yml
    apply:
      tags: always
  tags: always

- block:
    - name: (main) Configure out database
      include_tasks:
        file: create-database.yml
        apply:
          tags: always

    - name: (main) Create our check file so we don't run this again
      file:
        path: "/home/{{ service_user_name }}/.oradb_installed"
        state: touch

    - name: (main) oradb installed
      set_fact:
        oradb_installed: true

  when:
    - not oradb_installed
    - database_type != "standby"
  tags: always

- name: (main) Setup TAF Service Name
  include_tasks:
    file: set-taf-service.yml
    apply:
      tags: always
  when:
    - database_type != "standby"
  tags: always

- name: (main) Install Oracle Secure Web Backup Service (oswbs)
  include_role:
    name: oracle-secure-backup
  vars:
    database_home: "{{ oracle_database_oracle_home }}"
  tags: 
     - always
     - oracle-secure-backup

- name: Ensure Password File is in ASM
  when: database_type != "standby"
  include_tasks:
    file: move_password_file_to_asm.yml
    apply:
      tags: always
  tags: always
