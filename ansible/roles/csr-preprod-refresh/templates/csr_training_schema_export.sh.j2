#!/bin/bash

# Filename: csr_training_schema_export.sh

#@@START_INITIALISATION#
THISSCRIPT=`basename $0`
SCRIPT_DIR=`dirname $0`
SUFFIX=`date '+%d-%m-%y-%H%M%S'`
LOGFILE=${SCRIPT_DIR}/../logs/schema_export_${SUFFIX}.log
SUCCESS_STATUS=0
WARNING_STATUS=1
ERROR_STATUS=9
V_SESSION=v\$session
cd $SCRIPT_DIR
#@@END_INITIALISATION#

#@@START_FUNCTION_DECLARATION#

usage () {
  echo ""
  echo "Usage:"
  echo ""
  echo "  $THISSCRIPT -i <db sid> -d <dp dir> -f <dpfile> -s <schema>"
  echo ""
  echo "where"
  echo "  db sid = Database SID"
  echo "  dp dir = datapump directory"
  echo "  dpfile = datapump file name"
  echo "  schemas = schema to be backed up for future refreshes"
  echo "  eg. $THISSCRIPT -i PPIWFM -d refresh_dump_dir -f iwfm_train3_070318.dmp -s iwfm_train3"
  echo ""
  exit $ERROR_STATUS
}

info () {
  T=`date +"%D %T"`
  echo "INFO : $THISSCRIPT : $T : $1"
  if [ "$DEBUG_MODE" = "Y" ]
  then
    read CONTINUE?"Press any key to continue "
  fi
}

warning () {
  T=`date +"%D %T"`
  echo "WARNING : $THISSCRIPT : $T : $1"
}

error () {
  T=`date +"%D %T"`
  echo "ERROR : $THISSCRIPT : $T : $1"
  exit $ERROR_STATUS
}

set_ora_env () {
  export ORAENV_ASK=NO
  export ORACLE_SID=$1
  . oraenv
  unset SQLPATH
  unset TWO_TASK
  unset LD_LIBRARY_PATH
  export NLS_DATE_FORMAT=YYMMDDHH24MI
}

validate_schema () {
  USERNAME=$1
  EXISTS=""
  X=`sqlplus -s "/ as sysdba" <<EOF
     set feedback off heading off verify off echo off
     select 'EXISTS='||username
     from dba_users
     where username = upper('$USERNAME');
     exit
EOF`
  eval $X
  [ -z $EXISTS ] && error "Schema $USERNAME does not exist in $ORACLE_SID" || info "Schema $USERNAME exists"
}

#@@END_FUNCTION_DECLARATION#

#@@START_FUNCTIONS#

#@@END_FUNCTIONS#

#@@START_MAIN#

############################################################################
#
# Main Routine
#

# ------------------------------------------------------------------------------
# Check that we are running as the correct user (oracle)
# ------------------------------------------------------------------------------
info "Validating user"
THISUSER=`id | cut -d\( -f2 | cut -d\) -f1`
[ "$THISUSER" != "oracle" ] && error "Must be oracle to run this script"
info "User ok"

# ------------------------------------------------------------------------------
# Execute users profile
# ------------------------------------------------------------------------------
export PATH=${PATH}:/usr/local/bin

# ------------------------------------------------------------------------------
# Check that we have been given all the required arguments
# ------------------------------------------------------------------------------
info "Retrieving arguments"

[ -z "$1" ] && usage

while getopts "i:d:f:s:t:" opt
do
  case $opt in
    i) SID=$OPTARG ;;
    d) DPDIR=$OPTARG ;;
    f) DPFILE=$OPTARG ;;
    s) SCHEMA=$OPTARG ;;
    *) usage ;;
  esac
done
info "Start - check ${LOGFILE} for progress"
exec 1>${LOGFILE} 2>&1
ORACLE_SID=$SID

info "Database sid = $SID"
info "Datapump directory = $DPDIR"
info "Datapump file = $DPFILE"
info "Schema = $SCHEMA"

# ------------------------------------------------------------------------------
# Validate the datapump directory
# ------------------------------------------------------------------------------
info "Source the Oracle environment for $ORACLE_SID"
set_ora_env $ORACLE_SID
info "Validate datapump directory $DPDIR"
if [ -z $DPDIR ]
then
  error "No datapump directory specified"
else
  X=`sqlplus -s "/ as sysdba" <<EOF
     set feedback off heading off echo off verify off
     select 'DPPATH='||directory_path
     from dba_directories
     where directory_name = upper('$DPDIR');
     exit
EOF`
  eval $X
  [ -z ${DPPATH} ] && error "No directory for ${DPDIR}, investigate"
  [ ! -d $DPPATH ] && error "$DPDIR not a directory, investigate" || info "$DPDIR ($DPPATH) correct"
fi
# ------------------------------------------------------------------------------
# Validate the datapump file
# ------------------------------------------------------------------------------
if [ -z $DPFILE ]
then
  error "No datapump file specified"
else
  [ -f ${DPPATH}/${DPFILE} ] && error "Dumpfile $DPFILE already exists"
fi
# ------------------------------------------------------------------------------
# Validate source schema
# ------------------------------------------------------------------------------
info "Validate schema $SCHEMA"
if [ -z $SCHEMA ]
then
  error "No source schema speficied"
else
  validate_schema $SCHEMA
fi

# ------------------------------------------------------------------------------
# Take backup of schema using datapump export
# ------------------------------------------------------------------------------
SUFFIX=`echo $DPFILE | cut -d'_' -f3 | cut -d'.' -f1`
info "Exporting schema ${SCHEMA}"
expdp "'/ as sysdba'" parallel=4 directory=$DPDIR schemas=$SCHEMA dumpfile=$DPFILE logfile=impdp_${SCHEMA}_${SUFFIX}.log
info "Export success"

aws s3 cp ${DPPATH}/${DPFILE} s3://{{ s3_bucket }}/