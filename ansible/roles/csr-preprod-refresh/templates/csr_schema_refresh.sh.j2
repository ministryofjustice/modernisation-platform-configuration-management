#!/bin/bash

THISSCRIPT=$(basename $0)
SCRIPT_DIR=$(dirname $0)
SUFFIX=$(date '+%d-%m-%y-%H%M%S')
LOGFILE=${SCRIPT_DIR}/../logs/auto_refresh_schemas_${SUFFIX}.log
SUCCESS_STATUS=0
WARNING_STATUS=1
ERROR_STATUS=9
V_SESSION=v\$session
cd $SCRIPT_DIR
#@@END_INITIALISATION#

#@@START_FUNCTION_DECLARATION#

usage () {
  echo ""
  echo "Usage:"
  echo ""
  echo "  $THISSCRIPT -i <db sid> -d <dp dir> -f <source dpfile> -s <source schema> -t <target schemas> "
  echo ""
  echo "where"
  echo "  db sid = Database SID"
  echo "  dp dir = datapump directory"
  echo "  source dpfile = Source datapump file name"
  echo "  target schemas = target schemas to be refreshed separated by single space and all wrapped with '"
  echo "  eg. $THISSCRIPT -d refresh_dump_dir -f iwfm_train3_070318.dmp -s iwfm_train3 -t 'iwfm_train4 iwfm_train5 $SCHEMA'"
  echo ""
  exit $ERROR_STATUS
}

info () {
  T=$(date +"%D %T")
  echo "INFO : $THISSCRIPT : $T : $1"
  if [ "$DEBUG_MODE" = "Y" ]
  then
    read CONTINUE?"Press any key to continue "
  fi
}

warning () {
  T=$(date +"%D %T")
  echo "WARNING : $THISSCRIPT : $T : $1"
}

error () {
  T=$(date +"%D %T")
  echo "ERROR : $THISSCRIPT : $T : $1"
  exit $ERROR_STATUS
}

set_ora_env () {
  export ORAENV_ASK=NO
  export ORACLE_SID=$1
  . oraenv
  unset SQLPATH
  unset TWO_TASK
  unset LD_LIBRARY_PATH
  export NLS_DATE_FORMAT=YYMMDDHH24MI
}

validate_schema () {
  USERNAME=$1
  EXISTS=""
  X=$(sqlplus -s "/ as sysdba" <<EOF
     set feedback off heading off verify off echo off
     select 'EXISTS='||username
     from dba_users
     where username = upper('$USERNAME');
     exit
EOF
)
  eval $X
  [ -z $EXISTS ] && error "Schema $USERNAME does not exist in $ORACLE_SID" || info "Schema $USERNAME exists"
}

kill_sessions () {
  USERNAME=$1
  info "Kill instance sessions for ${USERNAME}"
  sqlplus -s "/ as sysdba" <<EOF
  set serveroutput on size 100000
  whenever sqlerror exit 1
  declare

  cursor c1 is
    select sid,
           serial#
    from   $V_SESSION
    where  username=upper('$USERNAME');

  v_sql_stmt varchar2(4000);

  begin
    for r1 in c1
    loop
      v_sql_stmt:='alter system kill session '||''''||r1.sid||','||r1.serial#||'''';
      execute immediate v_sql_stmt;
    end loop;
  end;
  /
  exit
EOF
[ $? -ne 0 ] && error "PL/SQL to kill ${USERNAME} sessions error" || info "Instance ${USERNAME} sessions are now killed"
}

# ------------------------------------------------------------------------------
# Validate the datapump directory
# ------------------------------------------------------------------------------
validate_datapump_directory () {
info "Source the Oracle environment for $ORACLE_SID"
info "Validate datapump directory $DPDIR"
if [ -z $DPDIR ]
then
  error "No datapump directory specified"
else
  X=$(sqlplus -s "/ as sysdba" <<EOF
     set feedback off heading off echo off verify off
     select 'DPPATH='||directory_path
     from dba_directories
     where directory_name = upper('$DPDIR');
     exit
EOF
)
  eval $X
  [ -z ${DPPATH} ] && error "No directory for ${DPDIR}, investigate"
  [ ! -d $DPPATH ] && error "$DPDIR not a directory, investigate" || info "$DPDIR ($DPPATH) correct"
fi
}

# ------------------------------------------------------------------------------
# Validate the datapump file
# ------------------------------------------------------------------------------
validate_datapump_file () {
info "Download datapump file $SOURCE_DPFILE"
aws s3 cp s3://s3-bucket20230609110811735400000001/CSR_DB_REFRESH/${SOURCE_DPFILE} ${DPPATH}/
if [ -z $SOURCE_DPFILE ]
then
  error "No datapump file specified"
else
  ls ${DPPATH}/${SOURCE_DPFILE} > /dev/null 2>&1
  [ $? -ne 0 ] && error "Dumpfile $SOURCE_DPFILE does not exist" || info "Dumpfile $SOURCE_DPFILE exists"
fi
}

# ------------------------------------------------------------------------------
# Update schema passwords from AWS secret manager
# ------------------------------------------------------------------------------
update_schema_passwords() {
cat /dev/null > password_change.sql
for SCHEMA in ${SOURCE_SCHEMA} ${TARGET_SCHEMAS[@]}
do
	PASSWORD=$(aws secretsmanager get-secret-value --secret-id "/oracle/database/${ORACLE_SID}/passwords" --query SecretString --output text | jq -r .${SCHEMA})
  echo "alter user ${SCHEMA} identified by ${PASSWORD};" >> password_change.sql
done
echo "exit" >> password_change.sql
sqlplus -s "/ as sysdba" @password_change.sql
rm password_change.sql
}

# ------------------------------------------------------------------------------
# Drop and recreate schemas
# ------------------------------------------------------------------------------
recreate_schemas() {
echo "spool schema_recreation.log" > schema_recreation.sql
for SCHEMA in ${TARGET_SCHEMAS[@]}
do
  info "Drop and create $SCHEMA"
  sqlplus -s "/ as sysdba" <<EOF>> schema_recreation.sql
  set feedback off
  set serveroutput on size 100000
  whenever sqlerror exit 1
  declare

  cursor c1 is
    select default_tablespace,
           temporary_tablespace,
           profile
    from   dba_users
    where  username = upper('$SCHEMA');

  v_sql_stmt   varchar2(4000);
  password VARCHAR2(20);
  digits    VARCHAR2(10) := '0123456789';
  lower     VARCHAR2(26) := 'abcdefghijklmnopqrstuvwxyz';
  upper     VARCHAR2(26) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
  special   VARCHAR2(32) := '_#';

  begin
    for r1 in c1
    loop
      v_sql_stmt:='drop user $SCHEMA cascade;';
      dbms_output.put_line(v_sql_stmt);

      SELECT LISTAGG(letter, NULL) WITHIN GROUP (ORDER BY DBMS_RANDOM.VALUE) INTO   password
      FROM   (
         SELECT SUBSTR(digits,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(digits) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 3
         UNION ALL
         SELECT SUBSTR(lower,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(lower) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 3
         UNION ALL
         SELECT SUBSTR(upper,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(upper) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 3
         UNION ALL
         SELECT SUBSTR(special,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(special) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 2
        );

      v_sql_stmt:='create user $SCHEMA profile '||r1.profile||' identified by P'|| password ||
                  ' default tablespace '||r1.default_tablespace||
                  ' temporary tablespace '||r1.temporary_tablespace||
                  ' quota unlimited on '||r1.default_tablespace||';';
      dbms_output.put_line(v_sql_stmt);

      v_sql_stmt:='grant create procedure,create sequence,create session,create table,create trigger,create type,create view,connect to $SCHEMA;';
      dbms_output.put_line(v_sql_stmt);
    end loop;
  end;
  /
  exit
EOF
done
echo "spool off" >> schema_recreation.sql
echo "exit" >> schema_recreation.sql
sqlplus -s "/ as sysdba" @schema_recreation.sql
[ $? -ne 0 ] && error "PL/SQL error to drop/create user $SCHEMA" || info "$SCHEMA dropped and created"
rm schema_recreation.sql schema_recreation.log
}

# ------------------------------------------------------------------------------
# Refresh schemas using datapump import
# ------------------------------------------------------------------------------
import_schemas () {
SUFFIX=$(echo $SOURCE_DPFILE | cut -d'_' -f3 | cut -d'.' -f1)
info "Import success"
for SCHEMA in ${TARGET_SCHEMAS[@]}
do
  info "Importing schema ${SCHEMA}"
  if [ ${SOURCE_SCHEMA} == ${SCHEMA} ]
  then
       impdp "'/ as sysdba'" parallel=4 directory=$DPDIR schemas=$SOURCE_SCHEMA dumpfile=$SOURCE_DPFILE logfile=impdp_${SCHEMA}_${SUFFIX}.log
  else
       impdp "'/ as sysdba'" parallel=4 directory=$DPDIR schemas=$SOURCE_SCHEMA dumpfile=$SOURCE_DPFILE logfile=impdp_${SCHEMA}_${SUFFIX}.log remap_schema=${SOURCE_SCHEMA}:${SCHEMA}
  fi
  info "Import success"
done
}

############################################################################
#
# Main Routine
#

# ------------------------------------------------------------------------------
# Check that we are running as the correct user (oracle)
# ------------------------------------------------------------------------------
info "Validating user"
THISUSER=$(id | cut -d\( -f2 | cut -d\) -f1)
[ "$THISUSER" != "oracle" ] && error "Must be oracle to run this script"
info "User ok"

# ------------------------------------------------------------------------------
# Execute users profile
# ------------------------------------------------------------------------------
export PATH=${PATH}:/usr/local/bin

# ------------------------------------------------------------------------------
# Check that we have been given all the required arguments
# ------------------------------------------------------------------------------
info "Retrieving arguments"

[ -z "$1" ] && usage

while getopts "i:d:f:s:t:" opt
do
  case $opt in
    i) SID=$OPTARG ;;
    d) DPDIR=$OPTARG ;;
    f) SOURCE_DPFILE=$OPTARG ;;
    s) SOURCE_SCHEMA=$OPTARG ;;
    t) TARGET_SCHEMAS=$OPTARG ;;
    *) usage ;;
  esac
done
info "Start - check ${LOGFILE} for progress"
exec 1>${LOGFILE} 2>&1
ORACLE_SID=$SID

info "Database sid = $SID"
info "Datapump directory = $DPDIR"
info "Source datapump file = $SOURCE_DPFILE"
info "Source Schema = $SOURCE_SCHEMA"
info "Target Schemas = $TARGET_SCHEMAS"
set_ora_env $ORACLE_SID

# ------------------------------------------------------------------------------
# Validate directory and data pump file
# ------------------------------------------------------------------------------
validate_datapump_directory
validate_datapump_file

# ------------------------------------------------------------------------------
# Validate source schema
# ------------------------------------------------------------------------------
info "Validate source schema $SOURCE_SCHEMA"
if [ -z $SOURCE_SCHEMA ]
then
  error "No source schema speficied"
fi

# ------------------------------------------------------------------------------
# Validate target schemas
# ------------------------------------------------------------------------------
info "Validating target schemas"
for SCHEMA in ${TARGET_SCHEMAS[@]}
do
  validate_schema $SCHEMA
done

# ------------------------------------------------------------------------------
# Kill connected database sessions
# ------------------------------------------------------------------------------
info "Killing instance sessions connected as ${TARGET_SCHEMAS[@]}"
for SCHEMA in ${TARGET_SCHEMAS[@]}
do
  kill_sessions ${SCHEMA}
done

# ------------------------------------------------------------------------------
# Recreate schemas and import the schemas
# ------------------------------------------------------------------------------
recreate_schemas
import_schemas
update_schema_passwords