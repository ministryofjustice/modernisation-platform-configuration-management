#!/bin/bash
THISSCRIPT=$(basename $0)
SCRIPT_DIR=$(dirname $0)
SUFFIX=$(date '+%d-%m-%y-%H%M%S')
LOGFILE=${SCRIPT_DIR}/../logs/auto_refresh_schemas_${SUFFIX}.log
SUCCESS_STATUS=0
WARNING_STATUS=1
ERROR_STATUS=9
V_SESSION=v\$session
cd $SCRIPT_DIR
export PATH=${PATH}:/usr/local/bin
. ~/.bash_profile 

usage () {
  echo ""
  echo "Usage:"
  echo ""
  echo "  $THISSCRIPT -i <DB SID> -s <schemas>  -d <datapump directoryname> -t <export dump files tag name>"
  echo ""
  echo "where"
  echo ""
  echo "  DB SID  = Oracle SID of the database"
  echo "  schemas = Schemas seperated by comma, if remapping schemas include : between both schema names"
  echo "  Datapump directory name = Directory name in database"
  echo "  tag     = tag used for database schema export."
  echo "  eg. $THISSCRIPT -i PPIWFM -s HMPS_CUSTOM:CUSTOM_MO,IWFM_REGION1 -d DATA_PUMP_DIR -t TAG"

  exit $ERROR_STATUS
}

info () {
  T=$(date +"%D %T")
  echo "INFO : $THISSCRIPT : $T : $1"
  if [ "$DEBUG_MODE" = "Y" ]
  then
    read CONTINUE?"Press any key to continue "
  fi
}

warning () {
  T=$(date +"%D %T")
  echo "WARNING : $THISSCRIPT : $T : $1"
}

error () {
  T=$(date +"%D %T")
  echo "ERROR : $THISSCRIPT : $T : $1"
  exit $ERROR_STATUS
}

set_ora_env () {
  export ORAENV_ASK=NO
  export ORACLE_SID=$1
  . /usr/local/bin/oraenv
  unset SQLPATH
  unset TWO_TASK
  unset LD_LIBRARY_PATH
  export NLS_DATE_FORMAT=YYMMDDHH24MI
}

validate_datapump_directory () {
  info "Validate datapump directory $DPDIR"
  if [ -z $DPDIR ]
  then
    error "No datapump directory specified"
  else
    X=`sqlplus -s "/ as sysdba" <<EOF
      set feedback off heading off echo off verify off
      select 'DPPATH='||directory_path
      from dba_directories
      where directory_name = upper('$DPDIR');
      exit
  EOF`
    eval $X
    [ -z ${DPPATH} ] && error "No directory for ${DPDIR}, investigate"
    [ ! -d $DPPATH ] && error "$DPDIR not a directory, investigate" || info "$DPDIR ($DPPATH) correct"
  fi
}
validate_schema () {
  USERNAME=$1
  info "validating schema ${USERNAME}" 
  echo "set feedback off heading off verify off echo off" > $SCRIPT_DIR/validate_schema.sql 
  echo "spool ${SCRIPT_DIR}/validate_user.log" >> $SCRIPT_DIR/validate_schema.sql
  echo "select 'cnt='||count(1) from dba_users where username = upper('${USERNAME}');" >> $SCRIPT_DIR/validate_schema.sql 
  echo "spool off" >> $SCRIPT_DIR/validate_schema.sql
  echo "exit" >> $SCRIPT_DIR/validate_schema.sql
  sqlplus -s "/ as sysdba" @$SCRIPT_DIR/validate_schema.sql > /dev/null 
  [ $(grep "cnt=1" ${SCRIPT_DIR}/validate_user.log | wc -l) ] && error "Schema ${USERNAME} does not exist in ${ORACLE_SID}" || info "Schema ${USERNAME} exists"
}

prepare_db_for_import () {
  info "Starting preparing database for import"
  echo "set feedback off heading off verify off echo off" > $SCRIPT_DIR/prepare_db_for_import.sql
  echo "spool ${SCRIPT_DIR}/prepare_db_for_import.log" >> $SCRIPT_DIR/prepare_db_for_import.sql
  echo "whenever sqlerror exit 1"  >> $SCRIPT_DIR/prepare_db_for_import.sql
  echo "shutdown immediate"  >> $SCRIPT_DIR/prepare_db_for_import.sql
  echo "startup mount" >> $SCRIPT_DIR/prepare_db_for_import.sql
  echo "alter database flashback off;" >> $SCRIPT_DIR/prepare_db_for_import.sql
  echo "alter database noarchivelog;" >> $SCRIPT_DIR/prepare_db_for_import.sql
  echo "alter database open;" >> $SCRIPT_DIR/prepare_db_for_import.sql
  echo "shutdown immediate" >> $SCRIPT_DIR/prepare_db_for_import.sql
  echo "startup restrict;" >> $SCRIPT_DIR/prepare_db_for_import.sql
  echo "exit" >> $SCRIPT_DIR/prepare_db_for_import.sql
  sqlplus -s "/ as sysdba" @$SCRIPT_DIR/prepare_db_for_import.sql > /dev/null 
  [ $(grep ORA- ${SCRIPT_DIR}/prepare_db_for_import.log| wc -l) > 0 ] && error "Prepapring db before import failed."
  info "Prepare database for import completed."
}

post_db_import () {
  info "Starting post database import steps"
  echo "set feedback off heading off verify off echo off" > $SCRIPT_DIR/post_db_import.sql
  echo "spool ${SCRIPT_DIR}/post_db_import.log" >> $SCRIPT_DIR/post_db_import.sql
  echo "whenever sqlerror exit 1"  >> $SCRIPT_DIR/post_db_import.sql
  echo "shutdown immediate"  >> $SCRIPT_DIR/post_db_import.sql
  echo "startup mount" >> $SCRIPT_DIR/post_db_import.sql
  echo "alter database archivelog;" >> $SCRIPT_DIR/post_db_import.sql
  echo "alter database flashback on;" >> $SCRIPT_DIR/post_db_import.sql
  echo "alter database open;" >> $SCRIPT_DIR/post_db_import.sql
  echo "@?/rdbms/admin/utlrp" >> $SCRIPT_DIR/post_db_import.sql
  echo "select owner, object_type , count(1) from dba_objects where status='INVALID' group by owner, object_type;" >> $SCRIPT_DIR/post_db_import.sql
  echo "exit" >> $SCRIPT_DIR/post_db_import.sql
  sqlplus -s "/ as sysdba" @$SCRIPT_DIR/post_db_import.sql > /dev/null 
  [ $(grep ORA- ${SCRIPT_DIR}/post_db_import.log| wc -l) -gt 0 ] && error "Post db import failed."
  info "Post database import steps completed."
}

recreate_schema () {
  USERNAME=$1
  info "Recreating schema ${USERNAME}"
  echo "spool ${SCRIPT_DIR}/schema_recreation.log" > $SCRIPT_DIR/schema_recreation.sql
  echo "set feedback off serveroutput on size 100000" >> $SCRIPT_DIR/schema_recreation.sql
  echo "define SCHEMA=${USERNAME}" >> $SCRIPT_DIR/schema_recreation.sql
  echo "declare" >> $SCRIPT_DIR/schema_recreation.sql
  echo "cursor c1 is select default_tablespace, temporary_tablespace, profile from dba_users  where  username = upper('${USERNAME}');" >> $SCRIPT_DIR/schema_recreation.sql
  echo "v_sql_stmt   varchar2(4000);" >> $SCRIPT_DIR/schema_recreation.sql
  echo "password VARCHAR2(20);" >> $SCRIPT_DIR/schema_recreation.sql
  echo "digits    VARCHAR2(10) := '0123456789';" >> $SCRIPT_DIR/schema_recreation.sql
  echo "lower     VARCHAR2(26) := 'abcdefghijklmnopqrstuvwxyz';" >> $SCRIPT_DIR/schema_recreation.sql
  echo "upper     VARCHAR2(26) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';" >> $SCRIPT_DIR/schema_recreation.sql
  echo "special   VARCHAR2(32) := '_';" >> $SCRIPT_DIR/schema_recreation.sql
  echo "begin" >> $SCRIPT_DIR/schema_recreation.sql
  echo "for r1 in c1" >> $SCRIPT_DIR/schema_recreation.sql
  echo "loop" >> $SCRIPT_DIR/schema_recreation.sql
  echo "v_sql_stmt:='drop user ${USERNAME} cascade;';" >> $SCRIPT_DIR/schema_recreation.sql
  echo "dbms_output.put_line(v_sql_stmt);" >> $SCRIPT_DIR/schema_recreation.sql
  echo "SELECT LISTAGG(letter, NULL) WITHIN GROUP (ORDER BY DBMS_RANDOM.VALUE) INTO   password" >> $SCRIPT_DIR/schema_recreation.sql
  echo "FROM   (" >> $SCRIPT_DIR/schema_recreation.sql
  echo "SELECT SUBSTR(digits,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(digits) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 3" >> $SCRIPT_DIR/schema_recreation.sql
  echo "UNION ALL SELECT SUBSTR(lower,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(lower) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 3" >> $SCRIPT_DIR/schema_recreation.sql
  echo "UNION ALL SELECT SUBSTR(upper,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(upper) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 3" >> $SCRIPT_DIR/schema_recreation.sql
  echo "UNION ALL SELECT SUBSTR(special,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(special) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 2);" >> $SCRIPT_DIR/schema_recreation.sql
  echo "v_sql_stmt:='create user ${USERNAME} profile '||r1.profile||' identified by P'|| password || ' default tablespace '||r1.default_tablespace||" >> $SCRIPT_DIR/schema_recreation.sql
  echo "' temporary tablespace '||r1.temporary_tablespace||' quota unlimited on '||r1.default_tablespace||';';">> $SCRIPT_DIR/schema_recreation.sql
  echo "dbms_output.put_line(v_sql_stmt);" >> $SCRIPT_DIR/schema_recreation.sql
  echo "v_sql_stmt:='grant create procedure,create sequence,create session,create table,create trigger,create type,create view,connect,unlimited tablespace to ${USERNAME};';" >> $SCRIPT_DIR/schema_recreation.sql
  echo "dbms_output.put_line(v_sql_stmt);" >> $SCRIPT_DIR/schema_recreation.sql
  echo "v_sql_stmt:='ALTER USER ${USERNAME} DEFAULT ROLE ALL;'" >> $SCRIPT_DIR/schema_recreation.sql
  echo "dbms_output.put_line(v_sql_stmt);" >> $SCRIPT_DIR/schema_recreation.sql
  echo "end loop;" >> $SCRIPT_DIR/schema_recreation.sql
  echo "end;" >> $SCRIPT_DIR/schema_recreation.sql
  echo "/" >> $SCRIPT_DIR/schema_recreation.sql
  echo "exit" 
  echo "spool off" >> >> $SCRIPT_DIR/schema_recreation.sql
  echo "exit" >> $SCRIPT_DIR/schema_recreation.sql
  sqlplus -s "/ as sysdba" @$SCRIPT_DIR/schema_recreation.sql > /dev/null 
  [ $(grep ORA- ${SCRIPT_DIR}/schema_recreation.log) -gt 0 ] && error "PL/SQL error to drop/create user ${USERNAME}" || info "${USERNAME} dropped and created"
}

change_password () {
  USERNAME=$1
  PASSWORD=$(aws secretsmanager get-secret-value --secret-id "/oracle/database/${ORACLE_SID}/passwords" --query SecretString --output text | jq -r .${USERNAME})
  echo "set feedback off heading off verify off echo off" > ${SCRIPT_DIR}/password_change.sql 
  echo "spool ${SCRIPT_DIR}/password_change.log" >> ${SCRIPT_DIR}/password_change.sql
  echo "alter user ${SCHEMA} identified by ${PASSWORD};" >> ${SCRIPT_DIR}/password_change.sql
  echo "exit" >> ${SCRIPT_DIR}password_change.sql
  sqlplus -s "/ as sysdba" @${SCRIPT_DIR}/password_change.sql
  [ $(grep ORA- ${SCRIPT_DIR}/schema_recreation.log) -gt 0 ] && error "${USERNAME} password reset failed." || info "${USERNAME} password reset successful."
  info "End"
}

# Main Routine
################

info "Validating OS user"
[ $(id | cut -d\( -f2 | cut -d\) -f1) != "oracle" ] && error "Must be oracle to run this script"
info "User ok"
REFRESH_DB_SID="UNSPECIFIED"
REFRESH_ALTERNATE_WEEK=9
SCRIPT_DIR="UNSPECIFIED"

while getopts "i:d:f:s:t:" opt
do
  case $opt in
    i) ORACLE_SID=$OPTARG ;;
    d) DPDIR=$OPTARG ;;
    s) SCHEMAS=$OPTARG ;;
    t) TAG=$OPTARG ;;
    *) usage ;;
  esac
done
[ "${ORACLE_SID}" = "UNSPECIFIED" ] && usage
[ "${DPDIR}" = "UNSPECIFIED" ] && usage
[ "${SCHEMAS}" = "UNSPECIFIED" ] && usage
[ "${TAG}" = "UNSPECIFIED" ] && usage

info "Start - check ${LOGFILE} for progress"
exec 1>${LOGFILE} 2>&1

info "Database sid = $SID"
info "Datapump directory = $DPDIR"
info "Schemas = $SCHEMAS"
info "Tag = $TAG"

# ------------------------------------------------------------------------------
# Validate DB SID and set environment 
# ------------------------------------------------------------------------------
info "Validating target database"
[ -z "$SID" -o "$SID" = "UNSPECIFIED" ] && usage
grep ^${SID}: /etc/oratab >/dev/null 2>&1
[ $? -ne 0 ] && error "Database $SID does not exist on this machine"
info "Target database ok"
info "Set environment for $SID"
set_ora_env $SID

# ------------------------------------------------------------------------------
# Validate the datapump directory
# ------------------------------------------------------------------------------
info "Source the Oracle environment for $ORACLE_SID"
set_ora_env $ORACLE_SID
validate_datapump_directory

info "Validate schemas $SCHEMAS"
if [ -z $SCHEMAS ]
then
  error "No schemas speficied"
else
  for i in $(echo $SCHEMAS | sed "s/,/ /g")
  do
    if [ `echo $i | grep ":"| wc -l ` -eq 0 ]
    then
      validate_schema $i
    elif [ `echo $i | grep -o ":"| wc -l ` -eq 1 ]
    then
      export TARGET_SCHEMA=`echo $i | grep ":"| awk -F':' '{ print $2}'`
      validate_schema $TARGET_SCHEMA
    else
      echo "Remap schemas specified incorrectly for $i"
    fi
  done
fi
# prepare_db_for_import
# for i in $(echo $SCHEMAS | sed "s/,/ /g")
# do
#   aws s3 cp s3://{{ s3_bucket }}/${i}_${TAG}.dmp ${DIRPATH}
#   if [ `echo $i | grep ":"| wc -l ` -eq 0 ]
#   then
#     recreate_schema ${i}
#     impdp userid="'/as sysdba'" directory=${DPDIR} dumpfile=${i}_${TAG}.dmp logfile=${i}_${TAG}_import.log
#     change_password ${i}
#   elif [ `echo $i | grep -o ":"| wc -l ` -eq 1 ]
#   then
#     SNAME=`echo $i | grep ":"| awk -F':' '{ print $1}'`
#     TNAME=`echo $i | grep ":"| awk -F':' '{ print $2}'`
#     recreate_schema ${TNAME}
#     impdp userid="'/as sysdba'" directory=${DPDIR} dumpfile=${SNAME}_${TAG}.dmp logfile=${SNAME}_${TAG}_import.log remap_schema=${i}
#     change_password ${TNAME}
#   else
#     echo "Remap schemas specified incorrectly for $i"
#   fi
# done
# post_db_import 