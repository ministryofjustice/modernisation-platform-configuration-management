#!/bin/bash

# Filename: csr_training_schema_refresh.sh

#@@START_INITIALISATION#
THISSCRIPT=`basename $0`
SCRIPT_DIR=`DPDIR $0`
SUFFIX=`date '+%d-%m-%y-%H%M%S'`
LOGFILE=${SCRIPT_DIR}/../logs/auto_refresh_schemas_${SUFFIX}.log
SUCCESS_STATUS=0
WARNING_STATUS=1
ERROR_STATUS=9
V_SESSION=v\$session
cd $SCRIPT_DIR
#@@END_INITIALISATION#

#@@START_FUNCTION_DECLARATION#

usage () {
  echo ""
  echo "Usage:"
  echo ""
  echo "  $THISSCRIPT -i <DB SID> -s <schemas>  -d <datapump directoryname> -t <export dump files tag name>"
  echo ""
  echo "where"
  echo ""
  echo "  DB SID  = Oracle SID of the database"
  echo "  schemas = Schemas seperated by comma, if remapping schemas include : between both schema names"
  echo "  Datapump directory name = Directory name in database"
  echo "  tag     = tag used for database schema export."
  echo "  eg. $THISSCRIPT -i PPIWFM -s HMPS_CUSTOM:CUSTOM_MO,IWFM_REGION1 -d DATA_PUMP_DIR -t TAG"

  exit $ERROR_STATUS
}

info () {
  T=`date +"%D %T"`
  echo "INFO : $THISSCRIPT : $T : $1"
  if [ "$DEBUG_MODE" = "Y" ]
  then
    read CONTINUE?"Press any key to continue "
  fi
}

warning () {
  T=`date +"%D %T"`
  echo "WARNING : $THISSCRIPT : $T : $1"
}

error () {
  T=`date +"%D %T"`
  echo "ERROR : $THISSCRIPT : $T : $1"
  exit $ERROR_STATUS
}

set_ora_env () {
  export ORAENV_ASK=NO
  export ORACLE_SID=$1
  . /usr/local/bin/oraenv
  unset SQLPATH
  unset TWO_TASK
  unset LD_LIBRARY_PATH
  export NLS_DATE_FORMAT=YYMMDDHH24MI
}

validate_schema () {
  USERNAME=$1
  EXISTS=""
  X=`sqlplus -s "/ as sysdba" <<EOF
     set feedback off heading off verify off echo off
     select 'EXISTS='||username
     from dba_users
     where username = upper('$USERNAME');
     exit
EOF`
  eval $X
  [ -z $EXISTS ] && error "Schema $USERNAME does not exist in $ORACLE_SID" || info "Schema $USERNAME exists"
}

prepare_db_for_import () {
  info "Check database is in archivelog mode before starting import"
  info "Target         = $1"
  set_ora_env $1
  X=$(sqlplus -s / as sysdba << EOF
  whenever sqlerror exit 1
  set feedback off heading off verify off echo off
  select 'LOG_MODE="'||log_mode||'"'
    from $V_DATABASE;
  exit
EOF
)
  [ $? -ne 0 ] && error "Cannot identify mode of the database"
  eval $X
  if [ "$LOG_MODE" != "NOARCHIVELOG" ] 
  then 
        sqlplus -s / as sysdba << EOF
        whenever sqlerror exit 1
        set feedback off heading off verify off echo off
        shutdown immediate
        startup mount
        alter database flashback off;
        alter database noarchivelog;
        alter database open;
        shutdown immediate
        startup restrict;
EOF
  fi
}

post_db_import () {
        sqlplus -s / as sysdba << EOF
        shutdown immediate
        startup mount
        alter database archivelog ;
        alter database flashback on;
        alter database open;
        set echo off
        @?/rdbms/admin/utlrp
        set echo on
        select owner, object_type , count(1) from dba_objects where status='INVALID' group by owner, object_type;
        exit
EOF
}
# ------------------------------------------------------------------------------
# Drop and recreate schemas
# ------------------------------------------------------------------------------
recreate_schema () {
        SCHEMA=$1
        echo "spool schema_recreation.log" > schema_recreation.sql
        info "Drop and create $SCHEMA"
        sqlplus -s "/ as sysdba" <<EOF>> schema_recreation.sql
        set feedback off
        set serveroutput on size 100000
        whenever sqlerror exit 1
        declare

        cursor c1 is
        select default_tablespace,
                temporary_tablespace,
                profile
        from   dba_users
        where  username = upper('$SCHEMA');

        v_sql_stmt   varchar2(4000);
        password VARCHAR2(20);
        digits    VARCHAR2(10) := '0123456789';
        lower     VARCHAR2(26) := 'abcdefghijklmnopqrstuvwxyz';
        upper     VARCHAR2(26) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ';
        special   VARCHAR2(32) := '_';

        begin
        for r1 in c1
        loop
        v_sql_stmt:='drop user $SCHEMA cascade;';
        dbms_output.put_line(v_sql_stmt);

        SELECT LISTAGG(letter, NULL) WITHIN GROUP (ORDER BY DBMS_RANDOM.VALUE) INTO   password
        FROM   (
                SELECT SUBSTR(digits,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(digits) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 3
                UNION ALL
                SELECT SUBSTR(lower,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(lower) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 3
                UNION ALL
                SELECT SUBSTR(upper,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(upper) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 3
                UNION ALL
                SELECT SUBSTR(special,FLOOR(DBMS_RANDOM.VALUE(1, LENGTH(special) + 1)),1) letter  FROM   DUAL CONNECT BY LEVEL <= 2
                );

        v_sql_stmt:='create user $SCHEMA profile '||r1.profile||' identified by P'|| password ||
                        ' default tablespace '||r1.default_tablespace||
                        ' temporary tablespace '||r1.temporary_tablespace||
                        ' quota unlimited on '||r1.default_tablespace||';';
        dbms_output.put_line(v_sql_stmt);

        v_sql_stmt:='grant create procedure,create sequence,create session,create table,create trigger,create type,create view,connect,unlimited tablespace to $SCHEMA;';
        dbms_output.put_line(v_sql_stmt);
        v_sql_stmt:='ALTER USER $SCHEMA DEFAULT ROLE ALL;'
        dbms_output.put_line(v_sql_stmt);
        end loop;
        end;
        /
        exit
EOF
        echo "spool off" >> schema_recreation.sql
        echo "exit" >> schema_recreation.sql
        sqlplus -s "/ as sysdba" @schema_recreation.sql
        [ $? -ne 0 ] && error "PL/SQL error to drop/create user $SCHEMA" || info "$SCHEMA dropped and created"
        rm schema_recreation.sql schema_recreation.log
}

# ------------------------------------------------------------------------------
# Update schema passwords from AWS secret manager
# ------------------------------------------------------------------------------
change_password () {
  SCHEMA=$1
  cat /dev/null > password_change.sql
  PASSWORD=`aws secretsmanager get-secret-value --secret-id "/oracle/database/${ORACLE_SID}/passwords" --query SecretString --output text | jq -r .${SCHEMA}`
  echo "alter user ${SCHEMA} identified by ${PASSWORD};" >> password_change.sql
  echo "exit" >> password_change.sql
  sqlplus -s "/ as sysdba" @password_change.sql
  rm password_change.sql
  info "End"
}
#@@END_FUNCTION_DECLARATION#

#@@START_FUNCTIONS#

#@@END_FUNCTIONS#

#@@START_MAIN#


############################################################################
#
# Main Routine
#

# ------------------------------------------------------------------------------
# Check that we are running as the correct user (oracle)
# ------------------------------------------------------------------------------
info "Validating OS user"
THISUSER=`id | cut -d\( -f2 | cut -d\) -f1`
[ "$THISUSER" != "oracle" ] && error "Must be oracle to run this script"
info "User ok"

# ------------------------------------------------------------------------------
# Execute users profile
# ------------------------------------------------------------------------------
export PATH=${PATH}:/usr/local/bin
. ~/.bash_profile 

# ------------------------------------------------------------------------------
# Check that we have been given all the required arguments
# ------------------------------------------------------------------------------
info "Retrieving arguments"

[ -z "$1" ] && usage

while getopts "i:d:f:s:t:" opt
do
  case $opt in
    i) SID=$OPTARG ;;
    d) DPDIR=$OPTARG ;;
    s) SCHEMAS=$OPTARG ;;
    t) TAG=$OPTARG ;;
    *) usage ;;
  esac
done
info "Start - check ${LOGFILE} for progress"
exec 1>${LOGFILE} 2>&1
ORACLE_SID=$SID

info "Database sid = $SID"
info "Datapump directory = $DPDIR"
info "Schemas = $SCHEMAS"
info "Tag = $TAG"

# ------------------------------------------------------------------------------
# Validate DB SID and set environment 
# ------------------------------------------------------------------------------
info "Validating target database"
[ -z "$SID" -o "$SID" = "UNSPECIFIED" ] && usage
grep ^${SID}: /etc/oratab >/dev/null 2>&1
[ $? -ne 0 ] && error "Database $SID does not exist on this machine"
info "Target database ok"
info "Set environment for $SID"
set_ora_env $SID

# ------------------------------------------------------------------------------
# Validate the datapump directory
# ------------------------------------------------------------------------------
info "Source the Oracle environment for $ORACLE_SID"
set_ora_env $ORACLE_SID
info "Validate datapump directory $DPDIR"
if [ -z $DPDIR ]
then
  error "No datapump directory specified"
else
  X=`sqlplus -s "/ as sysdba" <<EOF
     set feedback off heading off echo off verify off
     select 'DPPATH='||directory_path
     from dba_directories
     where directory_name = upper('$DPDIR');
     exit
EOF`
  eval $X
  [ -z ${DPPATH} ] && error "No directory for ${DPDIR}, investigate"
  [ ! -d $DPPATH ] && error "$DPDIR not a directory, investigate" || info "$DPDIR ($DPPATH) correct"
fi

# ------------------------------------------------------------------------------
# Validate schemas to be imported exist 
# ------------------------------------------------------------------------------
info "Validate schemas $SCHEMAS"
if [ -z $SCHEMAS ]
then
  error "No schemas speficied"
else
  for i in $(echo $SCHEMAS | sed "s/,/ /g")
  do
        if [ `echo $i | grep ":"| wc -l ` -eq 0 ]
        then
            validate_schema $i
        elif [ `echo $i | grep -o ":"| wc -l ` -eq 1 ]
        then
             export TARGET_SCHEMA=`echo $i | grep ":"| awk -F':' '{ print $2}'`
             validate_schema $TARGET_SCHEMA
        else
             echo "Remap schemas specified incorrectly for $i"
        fi
    done
fi

# ------------------------------------------------------------------------------
# Prepare database for db import 
# ------------------------------------------------------------------------------
pre_db_import

# ------------------------------------------------------------------------------
# Recreate schemas and import production dump file in preprod 
# ------------------------------------------------------------------------------

for i in $(echo $SCHEMAS | sed "s/,/ /g")
do
        aws s3 cp s3://{{ s3_bucket }}/${i}_${TAG}.dmp ${DIRPATH}
        if [ `echo $i | grep ":"| wc -l ` -eq 0 ]
        then
                recreate_schema ${i}
                impdp userid="'/as sysdba'" directory=${DPDIR} dumpfile=${i}_${TAG}.dmp logfile=${i}_${TAG}_import.log
                change_password ${i}
        elif [ `echo $i | grep -o ":"| wc -l ` -eq 1 ]
        then
                SNAME=`echo $i | grep ":"| awk -F':' '{ print $1}'`
                TNAME=`echo $i | grep ":"| awk -F':' '{ print $2}'`
                recreate_schema ${TNAME}
                impdp userid="'/as sysdba'" directory=${DPDIR} dumpfile=${SNAME}_${TAG}.dmp logfile=${SNAME}_${TAG}_import.log remap_schema=${i}
                change_password ${TNAME}
        else
                echo "Remap schemas specified incorrectly for $i"
        fi
done

# ------------------------------------------------------------------------------
# Post database steps to Convert database in ARCHIVELOG mode and validate objects 
# ------------------------------------------------------------------------------
post_db_import 