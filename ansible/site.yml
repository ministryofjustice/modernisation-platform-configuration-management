---
# Generic site.yml that deploys the appropriate set of roles for each
# host.
#
# Define a "roles_list" variable for each host containing the roles
# to run against that host.  Since the same roles typically
# run on the same component, and we are using dynamic inventory with
# tagging, define the "roles_list" variable in group_vars.
#
# For example, for a NOMIS database, define a roles_list variable in
#
# group_vars/server_type_db_audit
# ---
# roles_list:
#  - time
#  - hugepages
#  - oracle
#
# Example usage:
#
#   # Run all relevant roles against all hosts in check mode
#   ansible-playbook site.yml --check
#
#   # Run a subset of roles
#   ansible-playbook site.yml -e role=time,hugepages
#
#   # Limit the hosts (2 ways of doing this)
#   ansible-playbook site.yml --limit db-nomis
#   ansible-playbook site.yml -e target=localhost
#
#   # Force a role to be applied even if not defined in roles_list
#   ansible-playbook site.yml -e force_role=time
#
#   # Run all tasks with ec2provision tag
#   ansible-playbook site.yml --tags ec2provision

- hosts: "{{ target | default('all') }}"
  tasks:
    - name: Fail if unsupported ansible version
      ansible.builtin.fail:
        msg: "RHEL6 only works with ansible versions up to 2.12"
      when:
        - ansible_version.full >= "2.13.0"
        - ansible_distribution in ['RedHat', 'OracleLinux']
        - ansible_distribution_major_version in ['6']
      tags: always

    - name: Set roles_defined fact
      ansible.builtin.set_fact:
        # These are roles_list defined in inventory. Default is empty list.
        roles_defined: "{{ roles_list | default([]) }}"
      tags: always

    - name: Set roles_to_run fact for -e force_role
      ansible.builtin.set_fact:
        roles_to_run: "{{ force_role.split(',') | map('trim') }}"
      when: force_role is defined
      tags: always

    - name: Set roles_to_run fact for -e role
      ansible.builtin.set_fact:
        roles_to_run: "{{ role.split(',') | map('trim') | intersect(roles_defined) }}"
      when:
        - force_role is not defined
        - role is defined and role != "all"
      tags: always

    - name: Set roles_to_run fact default
      ansible.builtin.set_fact:
        roles_to_run: "{{ roles_defined }}"
      when:
        - force_role is not defined
        - role is not defined or role == "all"
      tags: always

    - name: Debug roles_to_run fact
      ansible.builtin.debug:
        var: roles_to_run
      when:
        - roles_to_run|length>0
      tags: always

    - name: Debug roles_defined fact
      ansible.builtin.debug:
        var: roles_defined
      when:
        - roles_to_run|length == 0
      tags: always

    - name: Fail if no role not found
      ansible.builtin.fail:
        msg: "role {{ role }} not found, see above debug"
      when:
        - role is defined
        - roles_to_run|length == 0
      tags: always

    - name: Execute roles
      include_role:
        name: "{{ role_to_run }}"
      with_items: "{{ roles_to_run }}"
      loop_control:
        loop_var: role_to_run
      tags: always
